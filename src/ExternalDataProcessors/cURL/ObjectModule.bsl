// @strict-types

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем ПутьКИсполняемомуФайлу; // Строка
Перем НаборыШифров; // Массив из Строка
Перем ЗаголовкиЗапроса; // Соответствие из КлючИЗначение
Перем ЗаголовкиЗапросаДополнительные; // Соответствие из КлючИЗначение
Перем ЗаголовкиОтвета; // Соответствие из КлючИЗначение
Перем КодСостояния; // Число
Перем РежимЭмуляцииБраузера; // Булево
Перем Прокси; // см. НовыйПрокси
Перем Аутентификация; // см. НоваяАутентификацияАбстрактная
Перем СертификатКлиента; // см. НовыйСертификатКлиента
Перем СертификатыУдостоверяющихЦентров; // см. НовыйСертификатыУдостоверяющихЦентров
Перем НастройкиПеренаправления; // см. НовыеНастройкиПеренаправления
Перем ОбновлятьКуки; // Булево
Перем ПутьКРезультату; // Строка
Перем ПутьКЗаголовкамОтвета; // Строка
Перем ПутьКЗаголовкамЗапроса; // Строка
Перем ПутьКТелуЗапроса; // Строка
Перем ВременныеФайлы; // Соответствие из КлючИЗначение
Перем ИменаЗаголовковЗапросаВНижнемРегистре; // Соответствие из КлючИЗначение
Перем СхемаURL; // Строка
Перем ПользовательскиеОпции; // Соответствие из КлючИЗначение
Перем РезультатЗапускаУтилиты; // см. НовыйРезультатЗапускаПрограммы
Перем ВыбрасыватьИсключение; // Булево
Перем Таймаут; // Число
Перем ТаймаутСоединения; // Число
Перем НастройкиПовторныхПопыток; // см. НовыеНастройкиПовторныхПопыток
Перем МаксимальнаяСкоростьПередачиДанных; // Число, Строка
Перем МинимальнаяСкоростьПередачиДанных; // Число
Перем СекундДляОценкиМинимальнойСкорости; // Число

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Получает содержимое по URL.
// 
// Параметры:
//  URL - Строка - Адрес ресурса в сети Интернет
// 
// Возвращаемое значение:
//  см. ЭтотОбъект
Функция Get(URL) Экспорт
	Возврат ОтправитьЗапрос(URL, "GET");
КонецФункции

// Получает содержимое по URL и возвращает в текстовом формате.
// 
// Параметры:
//  URL - Строка - Адрес ресурса в сети Интернет
// 
// Возвращаемое значение:
//  Строка - Полученное содержимое по URL в текстовом формате
Функция GetString(URL) Экспорт
	Возврат Get(URL).ОтветКакТекст();
КонецФункции

// Получает содержимое по URL и возвращает в формате JSON.
// 
// Параметры:
//  URL - Строка - Адрес ресурса в сети Интернет
// 
// Возвращаемое значение:
//  Произвольный - Полученное содержимое по URL в формате JSON
Функция GetJson(URL) Экспорт
	Возврат Get(URL).ОтветКакJson();
КонецФункции

// Получает содержимое по URL и возвращает в формате двоичных данных.
// 
// Параметры:
//  URL - Строка - Адрес ресурса в сети Интернет
// 
// Возвращаемое значение:
//  ДвоичныеДанные, Неопределено - Полученное содержимое по URL в формате двоичных данных
Функция GetBinaryData(URL) Экспорт
	Возврат Get(URL).ОтветКакДвоичныеДанные();
КонецФункции

// Скачивает файл по URL.
// 
// Параметры:
//  URL - Строка - Адрес ресурса в сети Интернет
// 
// Возвращаемое значение:
//  Строка, Неопределено - Путь к загруженному файлу
//@skip-check bsl-legacy-check-method-names-are-unique
Функция GetFile(URL) Экспорт
	Возврат Get(URL).ОтветКакПутьФайлу();
КонецФункции

// Передает файл на указанный URL.
// Для HTTP(S) будет использован метод PUT.
// 
// Параметры:
//  URL - Строка - Адрес ресурса в сети Интернет
//  Файл - Строка - путь к файлу, адрес двоичных данных во временном хранилище
//       - ДвоичныеДанные
//       - Файл
// 
// Возвращаемое значение:
//  см. ЭтотОбъект
Функция UploadFile(URL, Файл) Экспорт
	Возврат ОтправитьЗапрос(URL, "", Файл);	
КонецФункции

// (HTTP) Отправляет POST запрос.
// 
// Параметры:
//  URL - Строка - Адрес ресурса в сети Интернет
//  Данные - Строка - Простой текст, путь к файлу, адрес двоичных данных во временном хранилище 
//         - Структура
//         - Соответствие из КлючИЗначение
//         - ДвоичныеДанные
//         - Файл
//         - Неопределено
// 
// Возвращаемое значение:
//  см. ЭтотОбъект
Функция Post(URL, Данные = Неопределено) Экспорт
	Возврат ОтправитьЗапрос(URL, "POST", Данные);
КонецФункции

// (HTTP) Отправляет PUT запрос.
// 
// Параметры:
//  URL - Строка - Адрес ресурса в сети Интернет
//  Данные - Строка - Простой текст, путь к файлу, адрес двоичных данных во временном хранилище 
//         - Структура
//         - Соответствие из КлючИЗначение
//         - ДвоичныеДанные
//         - Файл
//         - Неопределено
// 
// Возвращаемое значение:
//  см. ЭтотОбъект
Функция Put(URL, Данные = Неопределено) Экспорт
	Возврат ОтправитьЗапрос(URL, "PUT", Данные);
КонецФункции

// Возвращает путь к файлу результата запроса.
// 
// Возвращаемое значение:
//  Строка, Неопределено - Путь к файлу результата запроса
Функция ОтветКакПутьФайлу() Экспорт
	
	Если Не ЗначениеЗаполнено(ПутьКРезультату) Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	Если ФайлСуществует(ПутьКРезультату) Тогда
		Возврат ПутьКРезультату;
	КонецЕсли;
	
КонецФункции

// Возвращает ответ запроса в формате двоичных данных.
// 
// Параметры:
//  УдалитьИзДисковойПамяти - Булево - Удаляет артефакты из дисковой памяти
// 
// Возвращаемое значение:
//  ДвоичныеДанные, Неопределено - Ответ запроса в формате двоичных данных
Функция ОтветКакДвоичныеДанные(УдалитьИзДисковойПамяти = Истина) Экспорт
	
	ИмяФайла = ОтветКакПутьФайлу();
	
	Результат = Неопределено;
	Если Не ИмяФайла = Неопределено Тогда
		Результат = Новый ДвоичныеДанные(ИмяФайла);
	КонецЕсли;
	
	Если УдалитьИзДисковойПамяти Тогда
		УдалитьАртефакты();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает ответ запроса в текстовом формате.
// 
// Параметры:
//  УдалитьИзДисковойПамяти - Булево - Удаляет артефакты из дисковой памяти
// 
// Возвращаемое значение:
//  Строка, Неопределено - Ответ запроса в текстовом формате
Функция ОтветКакТекст(УдалитьИзДисковойПамяти = Истина) Экспорт
	
	ИмяФайла = ОтветКакПутьФайлу();
	
	Результат = Неопределено;
	Если Не ИмяФайла = Неопределено Тогда
		ЧтениеТекста = Новый ЧтениеТекста(ИмяФайла, КодировкаТекста.UTF8);
		Результат = ЧтениеТекста.Прочитать();
		ЧтениеТекста.Закрыть();	
	КонецЕсли;
	
	Если УдалитьИзДисковойПамяти Тогда
		УдалитьАртефакты();
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

// Возвращает ответ запроса в формате JSON.
// 
// Параметры:
//  УдалитьИзДисковойПамяти - Булево - Удаляет артефакты из дисковой памяти
// 
// Возвращаемое значение:
//  Произвольный - Ответ запроса в формате JSON
Функция ОтветКакJson(УдалитьИзДисковойПамяти = Истина) Экспорт
		
	ИмяФайла = ОтветКакПутьФайлу();
	
	Результат = Неопределено;
	Если Не ИмяФайла = Неопределено Тогда
		Результат = ПрочитатьФайлJSON(ИмяФайла);
	КонецЕсли;
	
	Если УдалитьИзДисковойПамяти Тогда
		УдалитьАртефакты();
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

// Устанавливает аутентификацию по логину и паролю.
// 
// Параметры:
//  ИмяПользователя - Строка - Имя пользователя
//  Пароль - Строка - Пароль
// 
// Возвращаемое значение:
//  см. ЭтотОбъект
Функция Аутентификация(ИмяПользователя, Пароль) Экспорт
	Аутентификация = НоваяАутентификацияBasic();
	Аутентификация.ИмяПользователя = ИмяПользователя;
	Аутентификация.Пароль = Пароль;
	Возврат ЭтотОбъект();
КонецФункции

// (HTTP) Устанавливает Digest-аутентификацию.
// 
// Параметры:
//  ИмяПользователя - Строка - Имя пользователя
//  Пароль - Строка - Пароль
// 
// Возвращаемое значение:
//  см. ЭтотОбъект
Функция АутентификацияDigest(ИмяПользователя, Пароль) Экспорт
	Аутентификация = НоваяАутентификацияDigest();
	Аутентификация.ИмяПользователя = ИмяПользователя;
	Аутентификация.Пароль = Пароль;
	Возврат ЭтотОбъект();
КонецФункции

// (HTTP) Устанавливает AWS V4 Signature аутентификацию.
// 
// Параметры:
//  КлючДоступа - Строка - Ключ доступа
//  СекретныйКлюч - Строка - Секретный ключ
//  Регион - Строка - Регион
//  Сервис - Строка - Сервис
// 
// Возвращаемое значение:
//  см. ЭтотОбъект
Функция АутентификацияAWS4(КлючДоступа, СекретныйКлюч, Регион = "", Сервис = "") Экспорт
	Аутентификация = НоваяАутентификацияAWS4();
	Аутентификация.КлючДоступа = КлючДоступа;
	Аутентификация.СекретныйКлюч = СекретныйКлюч;
	Аутентификация.Регион = Регион;
	Аутентификация.Сервис = Сервис;
	Возврат ЭтотОбъект();
КонецФункции

// (HTTP) Устанавливает HTTP заголовки.
// 
// Параметры:
//  Заголовки - Соответствие из КлючИЗначение
//            - Строка - Строка содержащая пары ключ-значение. Значение от ключа должно быть разделено двоеточием. 
//                       Пары должны быть разделены символом переноса.
// 
// Возвращаемое значение:
//  см. ЭтотОбъект
Функция УстановитьЗаголовки(Заголовки) Экспорт
	Если ТипЗнч(Заголовки) = Тип("Соответствие") Тогда
		ЗаголовкиЗапроса = Заголовки;
	Иначе
		ЗаголовкиЗапроса = ЗаголовкиИзТекста(Заголовки);
	КонецЕсли;
	
	ОбновитьИменаЗаголовковВВерхнемРегистре();
	
	Возврат ЭтотОбъект();
КонецФункции

// (HTTP) Устанавливает HTTP заголовок.
// 
// Параметры:
//  Имя - Строка - Имя заголовка
//  Значение - Строка - Значение
// 
// Возвращаемое значение:
//  см. ЭтотОбъект
Функция УстановитьЗаголовок(Имя, Значение) Экспорт
	
	ИмяИсходное = ИменаЗаголовковЗапросаВНижнемРегистре.Получить(НРег(Имя)); // Строка
	Если ИмяИсходное = Неопределено Тогда
		ИмяИсходное = Имя;	
	КонецЕсли;
		
	ЗаголовкиЗапроса.Вставить(ИмяИсходное, Значение);	
	ИменаЗаголовковЗапросаВНижнемРегистре.Вставить(НРег(ИмяИсходное), ИмяИсходное);
	
	Возврат ЭтотОбъект();

КонецФункции

// (HTTP) Возвращает значение HTTP заголовка запроса.
// 
// Параметры:
//  Имя - Строка - Имя заголовка запроса
// 
// Возвращаемое значение:
//  Строка - Значение HTTP заголовка запроса
Функция Заголовок(Имя) Экспорт
	ИмяИсходное = ИменаЗаголовковЗапросаВНижнемРегистре.Получить(НРег(Имя)); // Строка
	
	Если ИмяИсходное = Неопределено Тогда
		Возврат "";	
	КонецЕсли;
	
	Значение = ЗаголовкиЗапроса.Получить(ИмяИсходное);
	Если Значение = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат Значение;	
КонецФункции

// (HTTP) Возвращает значение HTTP заголовка ответа.
// 
// Параметры:
//  Имя - Строка - Имя заголовка ответа
// 
// Возвращаемое значение:
//  Строка, Массив из Строка, Неопределено - Значение HTTP заголовка ответа
Функция ЗаголовокОтвета(Имя) Экспорт
	Возврат ЗаголовкиОтвета.Получить(НРег(Имя));	
КонецФункции

// (HTTP) Возвращает HTTP заголовки ответа.
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение - HTTP заголовки ответа:
//  	* Ключ - Строка - Имя заголовка
//  	* Значение - Строка, Массив из Строка - Значение(я) заголовка
Функция ЗаголовкиОтвета() Экспорт
	//@skip-check invocation-parameter-type-intersect
	Возврат СкопироватьСоответствие(ЗаголовкиОтвета);
КонецФункции

// (HTTP) Возвращает куки (cookie).
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение - Куки
Функция Куки() Экспорт
	
	Куки = Новый Соответствие();
	Массив = СтрРазделить(КукиСтрокой(), ";"); // Массив из Строка
	
	Для Каждого КлючИЗначениеСтрока Из Массив Цикл
		
		ПозицияРавенства = СтрНайти(КлючИЗначениеСтрока, "=");
		
		Если ПозицияРавенства Тогда
			Имя = СокрЛП(Сред(КлючИЗначениеСтрока, 1, ПозицияРавенства - 1));
			Значение = СокрЛП(Сред(КлючИЗначениеСтрока, ПозицияРавенства + 1));
			Куки.Вставить(Имя, Значение);
		Иначе
			Куки.Вставить(КлючИЗначениеСтрока);
		КонецЕсли;
			
	КонецЦикла;
	
	Возврат Куки;
	
КонецФункции

// (HTTP) Возвращает куки (cookie) строкой.
// 
// Возвращаемое значение:
//  Строка - Пары Name=Value разделенные точкой с запятой.
Функция КукиСтрокой() Экспорт
	Возврат Заголовок("Cookie");
КонецФункции

// (HTTP) Устанавливает куки (cookie).
// 
// Параметры:
//  Куки - Строка - Пары Name=Value разделенные точкой с запятой.
// 
// Возвращаемое значение:
//  см. ЭтотОбъект
Функция УстановитьКуки(Куки) Экспорт
	УстановитьЗаголовок("Cookie", Куки);
	Возврат ЭтотОбъект();	
КонецФункции

// (HTTP) Дополнять куки значениями Set-Cookie из заголовков ответа после выполнения запроса.
// 
// Параметры:
//  Обновлять - Булево - Обновлять
// 
// Возвращаемое значение:
//  см. ЭтотОбъект
Функция ОбновлятьКуки(Обновлять = Истина) Экспорт
	ОбновлятьКуки = Обновлять;
	Возврат ЭтотОбъект();
КонецФункции

// (HTTP) Дополнить куки значениями Set-Cookie из заголовков ответа.
Процедура ОбновитьКуки() Экспорт
	
	Если Не ЭтоHTTP() Тогда
		Возврат;
	КонецЕсли;
	
	КукиСтрокой = Заголовок("Cookie");
	НовыеКукиСтрокой = КукиИзОтветаСтрокой();
		
	Если Не ПустаяСтрока(НовыеКукиСтрокой) Тогда
		КукиСтрокой = КукиСтрокой 
			+ ?(ПустаяСтрока(КукиСтрокой), "", "; ")
			+ НовыеКукиСтрокой;
					
		УстановитьЗаголовок("Cookie", КукиСтрокой);
	КонецЕсли;
	
КонецПроцедуры

// (HTTP) Возвращает куки полученные из заголовка ответа Set-Cookie.
// 
// Возвращаемое значение:
//  Массив из см. НоваяЗаписьКуки
Функция КукиИзОтвета() Экспорт
	
	Куки = Новый Массив; // Массив из см. НоваяЗаписьКуки

	СтрокиУстановкиКуки = ЗаголовокОтвета("Set-Cookie");
	
	Если ТипЗнч(СтрокиУстановкиКуки) = Тип("Массив") Тогда
		Для Каждого Строка Из СтрокиУстановкиКуки Цикл
			ЗаписьКуки = ДесериализоватьSetCookie(Строка);
			Если ЗаписьКуки <> Неопределено Тогда
				Куки.Добавить(ЗаписьКуки);	
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗнч(СтрокиУстановкиКуки) = Тип("Строка") Тогда
		ЗаписьКуки = ДесериализоватьSetCookie(СтрокиУстановкиКуки);
		Если ЗаписьКуки <> Неопределено Тогда
			Куки.Добавить(ЗаписьКуки);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Куки;
	
КонецФункции

// (HTTP) Возвращает куки полученные из заголовка ответа Set-Cookie строкой.
// 
// Возвращаемое значение:
//  Строка - Пары Name=Value разделенные точкой с запятой.
Функция КукиИзОтветаСтрокой() Экспорт
	
	КукиСтрокой = "";
	Для Каждого Запись Из КукиИзОтвета() Цикл
		КукиСтрокой = КукиСтрокой 
			+ СтрШаблон("%1%2=%3", 
				?(КукиСтрокой = "", "", "; "),
				Запись["Name"],
				Запись["Value"]);
	КонецЦикла;
	
	Возврат КукиСтрокой;
	
КонецФункции

// (HTTP) Перенаправит запрос по новому Location, если сервер вернул ответ с кодом состояния 3XX.
// 
// Параметры:
//  ПеренаправлятьЗапрос - Булево - Перенаправлять запрос
//  ОтправлятьДанныеАутентификацииНаДругойХост - Булево - Отправлять данные аутентификации при перенаправлении
//		на другой хост.
//  МаксимальноеКоличествоПеренаправлений - Число - Максимальное количество перенаправлений. 
//		По умолчанию задано 50 перенаправлений.
//      Передача значения -1 делает количество перенаправлений неограниченным.
// 
// Возвращаемое значение:
//  см. ЭтотОбъект
Функция РазрешатьПеренаправления(ПеренаправлятьЗапрос = Истина, ОтправлятьДанныеАутентификацииНаДругойХост = Ложь, 
	МаксимальноеКоличествоПеренаправлений = 50) Экспорт
	
	НастройкиПеренаправления = НовыеНастройкиПеренаправления();
	НастройкиПеренаправления.Перенаправлять = ПеренаправлятьЗапрос;
	НастройкиПеренаправления.ПередаватьДанныеАутентификации = ОтправлятьДанныеАутентификацииНаДругойХост;
	НастройкиПеренаправления.МаксимальноеКоличествоПеренаправлений = МаксимальноеКоличествоПеренаправлений;
	
	Возврат ЭтотОбъект();
	
КонецФункции

// (HTTP) Устанавливает режим эмуляции браузера Google Сhrome.
// 
// Параметры:
//  Включить - Булево - Включить эмуляцию
// 
// Возвращаемое значение:
//  см. ЭтотОбъект
Функция ЭмуляцияБраузера(Включить = Истина) Экспорт
	РежимЭмуляцииБраузера = Включить;
	Возврат ЭтотОбъект();
КонецФункции

// (HTTP, FTP) Возвращает код состояния.
// 
// Возвращаемое значение:
//  Число - Код состояния
Функция КодСостояния() Экспорт
	Возврат КодСостояния;
КонецФункции

// Устанавливает сертификат клиента. 
// Если сертификат не содержит закрытый ключ, то его можно указать вызвав 
// метод см. УстановитьЗакрытыйКлючСертификата
// 
// Параметры:
//  ИмяФайла - Строка - Имя файла сертификата клиента
//  Пароль - Строка - Пароль закрытого ключа сертификата
//  Тип - Строка - Тип сертификата. Варианты: PEM, DER, ENG, P12
// 
// Возвращаемое значение:
//  см. ЭтотОбъект
Функция УстановитьСертификатКлиента(ИмяФайла, Пароль = "", Тип = "") Экспорт
	
	СертификатКлиента.ИмяФайлаСертификата = ИмяФайла;
	СертификатКлиента.Пароль = Пароль;
	СертификатКлиента.ТипСертификата = Тип;
	
	Возврат ЭтотОбъект();
	
КонецФункции

// Устанавливает закрытый ключ сертификата.
// 
// Параметры:
//  ИмяФайла - Строка - Имя файла закрытого ключа сертификата
//  КодовоеСлово - Строка - Кодовое слово (passphrase)
//  Тип - Строка - Тип закрытого ключа. Если не указано, то предполагается тип PEM.
//                 Варианты: DER, PEM, ENG
// 
// Возвращаемое значение:
//  см. ЭтотОбъект
Функция УстановитьЗакрытыйКлючСертификата(ИмяФайла, КодовоеСлово = "", Тип = "") Экспорт

	СертификатКлиента.ИмяФайлаЗакрытогоКлюча = ИмяФайла;
	СертификатКлиента.КодовоеСлово = КодовоеСлово;
	СертификатКлиента.ТипЗакрытогоКлюча = Тип;
	
	Возврат ЭтотОбъект();
	
КонецФункции

// Использовать сертификаты удостоверяющих центров из системного хранилища сертификатов ОС.
// 
// Возвращаемое значение:
//  см. ЭтотОбъект
Функция ИспользоватьСертификатыУдостоверяющихЦентровИзОС() Экспорт
	
	СертификатыУдостоверяющихЦентров.ИспользоватьИзХранилищаСертификатовОС = Истина;
	Возврат ЭтотОбъект();
	
КонецФункции

// Устанавливает сертификаты удостоверяющих центров из файла.
// Файл может содержать несколько сертификатов удостоверяющих центров.
// Сертификаты должны быть в формате PEM.
// 
// Параметры:
//  ИмяФайла - Строка - Имя файла содержащий сертификаты удостоверяющих центров в формате PEM
// 
// Возвращаемое значение:
//  см. ЭтотОбъект
Функция УстановитьСертификатыУдостоверяющихЦентров(ИмяФайла) Экспорт
		
	СертификатыУдостоверяющихЦентров.ИмяФайла = ИмяФайла;
	СертификатыУдостоверяющихЦентров.ИспользоватьИзХранилищаСертификатовОС = Ложь;
	
	Возврат ЭтотОбъект();
	
КонецФункции

// Добавляет наборы шифров (Cipher suite).
// 
// Параметры:
//  Наборы - Строка, Массив из Строка - Наборы шифров. В строке должно быть разделение наборов 
//  	через запятую либо символом переноса.
// 
// Возвращаемое значение:
//  см. ЭтотОбъект
Функция ДобавитьНаборыШифров(Наборы) Экспорт
	ДопустимыеРазделители = "," + Символы.ПС;
		
	Если ТипЗнч(Наборы) = Тип("Строка") Тогда
		НаборыМассив = СтрРазделить(Наборы, ДопустимыеРазделители);	
	Иначе
		НаборыМассив = Наборы;
	КонецЕсли;
	
	ДополнитьМассив(НаборыШифров, НаборыМассив, Истина);
	
	Возврат ЭтотОбъект();
КонецФункции

// Очищает наборы шифров.
// 
// Возвращаемое значение:
//  см. ЭтотОбъект
Функция ОчиститьНаборыШифров() Экспорт
	НаборыШифров.Очистить();
	Возврат ЭтотОбъект();
КонецФункции

// Очищает артефакты выполнения запроса и восстанавливает исходные настройки.
// 
// Возвращаемое значение:
//  см. ЭтотОбъект
Функция Сбросить() Экспорт
	УдалитьАртефакты();
	УстановитьНачальныеНастройки();
	Возврат ЭтотОбъект();
КонецФункции

// Использует исполняемый файл cURL для выполнения команд.
// 
// Параметры:
//  Путь - Строка - Путь к исполняемому файлу
// 
// Возвращаемое значение:
//  см. ЭтотОбъект
Функция УказатьИсполняемыйФайл(Путь) Экспорт
	ПутьКИсполняемомуФайлу = Путь;
	Возврат ЭтотОбъект();
КонецФункции

// Добавляет опцию команды curl.
// 
// Параметры:
//  Имя - Строка - Имя опции
//  Значение - Строка - Значение опции
// 
// Возвращаемое значение:
//  см. ЭтотОбъект
Функция ДобавитьОпцию(Имя, Значение = "") Экспорт
	ДобавитьОпциюВСписок(ПользовательскиеОпции, Имя, Значение);
	Возврат ЭтотОбъект();
КонецФункции

// Удаляет добавленную опцию команды curl.
// 
// Параметры:
//  Имя - Строка - Имя опции
// 
// Возвращаемое значение:
//  см. ЭтотОбъект
Функция УдалитьОпцию(Знач Имя) Экспорт
	Имя = НРег(СокрЛП(Имя));
	ПользовательскиеОпции.Удалить(Имя);
	Возврат ЭтотОбъект();
КонецФункции

// Очищает добавленные опции команды curl.
// 
// Возвращаемое значение:
//  см. ЭтотОбъект
Функция ОчиститьОпции() Экспорт
	ПользовательскиеОпции = Новый Соответствие();
	Возврат ЭтотОбъект();	
КонецФункции

// Собирает консольную команду curl.
// 
// Параметры:
//  URL - Строка - Адрес ресурса в сети Интернет
//  Метод - Строка - Метод запроса (GET, POST, PUT и т.д.)
//  Данные - Строка - Простой текст, путь к файлу, адрес двоичных данных во временном хранилище
//         - Структура
//         - Соответствие из КлючИЗначение
//         - ДвоичныеДанные
//         - Файл
//         - Неопределено
// 
// Возвращаемое значение:
//  Строка - Консольная команда curl
Функция СобратьКоманду(URL, Метод = "", Данные = Неопределено) Экспорт
	
	ПрочитатьСхемуURL(URL);
	ЗаполнитьДополнительныеЗаголовкиЗапроса(Данные);
		
	Опции = Новый Соответствие();
	ДополнитьСоответствие(Опции, ПользовательскиеОпции);
	
	Если РежимЭмуляцииБраузера Тогда
		ЭмуляцияChrome(Опции);
	КонецЕсли;
	
	ДобавитьОпциюURL(Опции, URL);
	ДобавитьОпциюМетодЗапроса(Опции, Метод);
	ДобавитьОпциюНаборыШифров(Опции);
	ДобавитьОпциюЗаголовки(Опции);
	ДобавитьОпциюФайлДампаЗаголовков(Опции);
	ДобавитьОпциюАутентификации(Опции);
	ДобавитьОпциюПеренаправлениеЗапроса(Опции);	
	ДобавитьОпциюДанныеЗапросаБезопасно(Опции, Данные, Метод);
	ДобавитьОпциюСертификатаКлиента(Опции);
	ДобавитьОпциюЗакрытогоКлючаСертификата(Опции);
	ДобавитьОпциюСертификатовУдостоверяющихЦентров(Опции);
	ДобавитьОпциюПрокси(Опции);
	ДобавитьОпциюАутентификацииПрокси(Опции);
	ДобавитьОпциюСертификатаКлиентаПрокси(Опции);
	ДобавитьОпциюЗакрытогоКлючаСертификатаПрокси(Опции);
	ДобавитьОпциюСертификатовУдостоверяющихЦентровПрокси(Опции);
	ДобавитьОпциюТаймаут(Опции);
	ДобавитьОпциюТаймаутСоединения(Опции);
	ДобавитьОпциюКоличествоПовторныхПопыток(Опции);
	ДобавитьОпциюЗадержкаПовторнойПопытки(Опции);
	ДобавитьОпциюТаймаутПовторныхПопыток(Опции);
	ДобавитьОпциюОграниченияСкорости(Опции);
	ДобавитьОпциюПрерыванияМедленнойПередачиДанных(Опции);
	ДобавитьОпциюПутьКВыходномуФайлу(Опции);
	ДобавитьОпциюТихийРежим(Опции);
	ДобавитьОпциюПоказыватьОшибки(Опции);

	СтрокаКоманды = СтрШаблон("%1 %2", ИмяКоманды(), ОпцииВСтроку(Опции));
		
	Возврат СтрокаКоманды;
	
КонецФункции

// Код возврата утилиты, вызванной из командной строки.
// 
// Возвращаемое значение:
//  Число - Код возврата утилиты
Функция КодВозврата() Экспорт
	Возврат РезультатЗапускаУтилиты.КодВозврата;
КонецФункции

// Текст ошибки, направленный в поток stderr.
// 
// Возвращаемое значение:
//  Строка - Текст ошибки
Функция ТекстОшибки() Экспорт
	Возврат РезультатЗапускаУтилиты.ПотокОшибок;	
КонецФункции

// Выбрасывать исключение при получении ошибки от утилиты. 
// 
// Параметры:
//  Выбрасывать - Булево - Выбрасывать исключение
// 
// Возвращаемое значение:
//  см. ЭтотОбъект
Функция ВыбрасыватьИсключение(Выбрасывать = Истина) Экспорт
	ВыбрасыватьИсключение = Выбрасывать;
	Возврат ЭтотОбъект();		
КонецФункции

// Ограничивает максимальное время ожидания на выполнение запроса.
// 
// Если установлено количество попыток (см. УстановитьКоличествоПопыток), то
// время ожидания сбрасывается при каждой повторной попытке. Чтобы ограничить 
// общее время повторных попыток см. УстановитьТаймаутПовторныхПопыток.
// 
// Невозможность выполнения запроса за заданное время приводит к
// завершению работы curl с кодом возврата (28).
// 
// Параметры:
//  Секунд - Число - Секунд
// 
// Возвращаемое значение:
//  см. ЭтотОбъект
Функция УстановитьТаймаут(Секунд) Экспорт
	Таймаут = Секунд;
	Возврат ЭтотОбъект();
КонецФункции

// Ограничивает максимальное время ожидания на попытку соединения к хосту.
// 
// Невозможность подключения в течение заданного времени приводит к
// завершению работы curl с кодом возврата (28).
// 
// Параметры:
//  Секунд - Число - Секунд
// 
// Возвращаемое значение:
//  см. ЭтотОбъект
Функция УстановитьТаймаутСоединения(Секунд) Экспорт
	ТаймаутСоединения = Секунд;
	Возврат ЭтотОбъект();
КонецФункции

// Устанавливает количество попыток на соединение или выполнение запроса.
// 
// Повторная попытка возникает при следующих ошибках: 
//	- достигнуто максимальное время ожидания соединения с хостом или выполнения запроса; 
//	- возвращен кода ответа FTP 4xx;
//	- возвращен кода состояния HTTP 408, 429, 500, 502, 503, 504.
//	
// Перед предстоящей попыткой устанавливается задержка по алгоритму экспоненциального откладывания,
// начиная с 1 секунды и с каждой попыткой удваивая время ожидания, пока не будет достигнуто 10 минут.
// 
// Если методом см. УстановитьЗадержкуПовторнойПопытки установлена задержка, то в таком случае алгоритм
// экспоненциального откладывания отключается.
// 
// Параметры:
//  Количество - Число - Количество попыток
// 
// Возвращаемое значение:
//  см. ЭтотОбъект
Функция УстановитьКоличествоПопыток(Количество) Экспорт
	НастройкиПовторныхПопыток.КоличествоПопыток = Количество;
	Возврат ЭтотОбъект();	
КонецФункции

// Устанавливает задержку повторной попытки.
// 
// Имеет смысл использовать совместно с методом см. УстановитьКоличествоПопыток.
// 
// Параметры:
//  Секунд - Число - Секунд
// 
// Возвращаемое значение:
//  см. ЭтотОбъект
Функция УстановитьЗадержкуПовторнойПопытки(Секунд) Экспорт
	НастройкиПовторныхПопыток.Задержка = Секунд;
	Возврат ЭтотОбъект();	
КонецФункции

// Ограничивает максимальное время ожидания на повторные попытки выполнения запроса.
// 
// Невозможность выполнения запроса за заданное время приводит к
// завершению работы curl с кодом возврата (28).
// 
// Имеет смысл использовать совместно с методом см. УстановитьКоличествоПопыток.
// 
// Параметры:
//  Секунд - Число - Секунд
// 
// Возвращаемое значение:
//  см. ЭтотОбъект
Функция УстановитьТаймаутПовторныхПопыток(Секунд) Экспорт
	НастройкиПовторныхПопыток.Таймаут = Секунд;
	Возврат ЭтотОбъект();
КонецФункции

// Устанавливает максимальную скорость передачи данных.
// 
// Параметры:
//  Скорость - Число, Строка - Скорость измеряется в байт/с если не указан суффикс.
//                             Суффиксы: 'K' - Кбайт/с, 'M' - Мбайт/с, 'G' - Гбайт/с, 'T' - Тбайт/с, 'P' - Пбайт/с
//                             Примеры: 200K, 3M, 1G
// 
// Возвращаемое значение:
//  см. ЭтотОбъект
Функция ОграничитьСкорость(Скорость) Экспорт
	МаксимальнаяСкоростьПередачиДанных = Скорость;
	Возврат ЭтотОбъект();
КонецФункции

// Прерывает медленную передачу данных.
// 
// Прерывание приводит к завершению работы curl с кодом возврата (28).
// 
// Параметры:
//  МинимальнаяСкорость - Число - Минимальная скорость передачи данных в Байт/с
//  Секунд - Число - Промежуток времени в секундах для оценки средней скорости. По умолчанию 30 секунд.
// 
// Возвращаемое значение:
//  см. ЭтотОбъект
Функция ПрерыватьМедленнуюПередачуДанных(МинимальнаяСкорость, Секунд = 30) Экспорт
	МинимальнаяСкоростьПередачиДанных = МинимальнаяСкорость;
	СекундДляОценкиМинимальнойСкорости = Секунд;
	Возврат ЭтотОбъект();
КонецФункции

#Область Прокси

// Устанавливает параметры прокси-сервера.
// 
// Параметры:
//  Протокол - Строка - Протокол. Доступные варианты: 
//  	http, https, socks4, socks4a, socks5, socks5h.
//  	Используйте socks5h, чтобы работать с интернет-протоколом IPv6.
//  Хост - Строка - Хост
//  Порт - Число - Порт. Значение по умолчанию: 1080
// 
// Возвращаемое значение:
//  см. ЭтотОбъект
Функция УстановитьПрокси(Протокол, Хост, Порт = 1080) Экспорт
	Прокси.Протокол = Протокол;
	Прокси.Хост = Хост;
	Прокси.Порт = Порт;
	Возврат ЭтотОбъект();
КонецФункции

// Устанавливает аутентификацию по логину и паролю для прокси-сервера.
// 
// Параметры:
//  ИмяПользователя - Строка - Имя пользователя
//  Пароль - Строка - Пароль
// 
// Возвращаемое значение:
//  см. ЭтотОбъект
Функция АутентификацияПрокси(ИмяПользователя, Пароль) Экспорт
	НоваяАутентификация = НоваяАутентификацияBasic();
	НоваяАутентификация.ИмяПользователя = ИмяПользователя;
	НоваяАутентификация.Пароль = Пароль;
	
	Прокси.Аутентификация = НоваяАутентификация;
	Возврат ЭтотОбъект();
КонецФункции

// (HTTP) Устанавливает Digest-аутентификацию для прокси-сервера.
// 
// Параметры:
//  ИмяПользователя - Строка - Имя пользователя
//  Пароль - Строка - Пароль
// 
// Возвращаемое значение:
//  см. ЭтотОбъект
Функция АутентификацияПроксиDigest(ИмяПользователя, Пароль) Экспорт
	НоваяАутентификация = НоваяАутентификацияDigest();
	НоваяАутентификация.ИмяПользователя = ИмяПользователя;
	НоваяАутентификация.Пароль = Пароль;
	
	Прокси.Аутентификация = НоваяАутентификация;
	Возврат ЭтотОбъект();
КонецФункции

// Устанавливает сертификат клиента для прокси-сервера. 
// Если сертификат не содержит закрытый ключ, то его можно указать вызвав 
// метод см. ПроксиУстановитьЗакрытыйКлючСертификата
// 
// Параметры:
//  ИмяФайла - Строка - Имя файла сертификата клиента
//  Пароль - Строка - Пароль закрытого ключа сертификата
//  Тип - Строка - Тип сертификата. Варианты: PEM, DER, ENG, P12
// 
// Возвращаемое значение:
//  см. ЭтотОбъект
Функция ПроксиУстановитьСертификатКлиента(ИмяФайла, Пароль = "", Тип = "") Экспорт
	Прокси.СертификатКлиента.ИмяФайлаСертификата = ИмяФайла;
	Прокси.СертификатКлиента.Пароль = Пароль;
	Прокси.СертификатКлиента.ТипСертификата = Тип;
	Возврат ЭтотОбъект();	
КонецФункции

// Устанавливает закрытый ключ сертификата для прокси-сервера.
// 
// Параметры:
//  ИмяФайла - Строка - Имя файла закрытого ключа сертификата
//  КодовоеСлово - Строка - Кодовое слово (passphrase)
//  Тип - Строка - Тип закрытого ключа. Если не указано, то предполагается тип PEM.
//                 Варианты: DER, PEM, ENG
// 
// Возвращаемое значение:
//  см. ЭтотОбъект
Функция ПроксиУстановитьЗакрытыйКлючСертификата(ИмяФайла, КодовоеСлово = "", Тип = "") Экспорт
	Прокси.СертификатКлиента.ИмяФайлаЗакрытогоКлюча = ИмяФайла;
	Прокси.СертификатКлиента.КодовоеСлово = КодовоеСлово;
	Прокси.СертификатКлиента.ТипЗакрытогоКлюча = Тип;
	Возврат ЭтотОбъект();	
КонецФункции

// Использовать сертификаты удостоверяющих центров из системного хранилища сертификатов ОС для прокси-сервера.
// 
// Возвращаемое значение:
//  см. ЭтотОбъект
Функция ПроксиИспользоватьСертификатыУдостоверяющихЦентровИзОС() Экспорт
	Прокси.СертификатыУдостоверяющихЦентров.ИспользоватьИзХранилищаСертификатовОС = Истина;
	Возврат ЭтотОбъект();	
КонецФункции

// Устанавливает сертификаты удостоверяющих центров из файла для прокси-сервера.
// Файл может содержать несколько сертификатов удостоверяющих центров.
// Сертификаты должны быть в формате PEM.
// 
// Параметры:
//  ИмяФайла - Строка - Имя файла содержащий сертификаты удостоверяющих центров в формате PEM
// 
// Возвращаемое значение:
//  см. ЭтотОбъект
Функция ПроксиУстановитьСертификатыУдостоверяющихЦентров(ИмяФайла) Экспорт		
	Прокси.СертификатыУдостоверяющихЦентров.ИмяФайла = ИмяФайла;
	Прокси.СертификатыУдостоверяющихЦентров.ИспользоватьИзХранилищаСертификатовОС = Ложь;	
	Возврат ЭтотОбъект();	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьНачальныеНастройки()
	
	Прокси = НовыйПрокси();
	Аутентификация = НоваяАутентификацияАбстрактная();
	СертификатКлиента = НовыйСертификатКлиента();
	СертификатыУдостоверяющихЦентров = НовыйСертификатыУдостоверяющихЦентров();
	КодСостояния = 0;
	Таймаут = 0;
	ТаймаутСоединения = 0;
	МаксимальнаяСкоростьПередачиДанных = 0;
	МинимальнаяСкоростьПередачиДанных = 0;
	СекундДляОценкиМинимальнойСкорости = 0;
	НаборыШифров = Новый Массив;
	ЗаголовкиЗапроса = Новый Соответствие();
	ЗаголовкиЗапросаДополнительные = Новый Соответствие();
	ЗаголовкиОтвета = Новый Соответствие();
	ИменаЗаголовковЗапросаВНижнемРегистре = Новый Соответствие();
	ВременныеФайлы = Новый Соответствие();
	РезультатЗапускаУтилиты = НовыйРезультатЗапускаПрограммы();
	НастройкиПовторныхПопыток = НовыеНастройкиПовторныхПопыток();
	
	РазрешатьПеренаправления(Ложь);
	ВыбрасыватьИсключение(Ложь);
	ОбновлятьКуки(Истина);
	ОчиститьОпции();
	ЭмуляцияБраузера(Ложь);
		
КонецПроцедуры

// Отправляет запрос.
// 
// Параметры:
//  URL - Строка - Адрес ресурса в сети Интернет
//  Метод - Строка - Метод запроса
//  Данные - Строка - Простой текст, путь к файлу, адрес двоичных данных во временном хранилище
//         - Структура
//         - Соответствие из КлючИЗначение
//         - ДвоичныеДанные
//         - Файл
//         - Неопределено
// 
// Возвращаемое значение:
//  см. ЭтотОбъект
Функция ОтправитьЗапрос(URL, Метод = "", Данные = Неопределено)

	КодСостояния = 0;
	ЗаголовкиОтвета.Очистить();
	РезультатЗапускаУтилиты = НовыйРезультатЗапускаПрограммы();
	
	УдалитьАртефакты();
	
	Команда = СобратьКоманду(URL, Метод, Данные);
	ВыполнитьКоманду(Команда);
	
	ПрочитатьЗаголовкиОтвета();
	
	Если ОбновлятьКуки Тогда
		ОбновитьКуки();
	КонецЕсли;
	
	Возврат ЭтотОбъект();
	
КонецФункции

Процедура ВыполнитьКоманду(СтрокаКоманды)
	
	Попытка
		РезультатЗапускаУтилиты = ЗапуститьПрограмму(СтрокаКоманды);
		Если РезультатЗапускаУтилиты.КодВозврата > 0
			И (ВыбрасыватьИсключение Или Не ЭтоОшибкаУтилиты(РезультатЗапускаУтилиты.ПотокОшибок)) Тогда
			ВызватьИсключение РезультатЗапускаУтилиты.ПотокОшибок;
		КонецЕсли;
	Исключение
		УдалитьАртефакты();
		
		ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибки = СтрШаблон("Не удалось выполнить команду curl: 
		|%1", ТекстОшибки);
		
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
				
	УдалитьФайлЕслиСуществует(ПутьКЗаголовкамЗапроса);
	УдалитьФайлЕслиСуществует(ПутьКТелуЗапроса);
	УдалитьФайлЕслиПустой(ПутьКРезультату);
	
КонецПроцедуры

// Запускает внешнюю программу на исполнение с ожиданием завершения
//
// Параметры:
//  СтрокаКоманды  - Строка - командная строка для запуска программы.
//
// Возвращаемое значение:
//  см. НовыйРезультатЗапускаПрограммы
Функция ЗапуститьПрограмму(Знач СтрокаКоманды) 
	
	КодВозврата = 0; // Число
		
	ИмяФайлаПотокаОшибок = НовоеИмяВременногоФайла("stderr.tmp");
	СтрокаКоманды = СтрокаКоманды + " 2>" + ОбернутьКавычками(ИмяФайлаПотокаОшибок);
	
	Если ЭтоWindows() Тогда
		Кодировка = КодировкаТекста.OEM;
			
		СтрокаКоманды = СтрШаблон("(chcp 866) && (%1)", СтрокаКоманды);
		СтрокаКоманды = "cmd /S /C " + ОбернутьКавычками(СтрокаКоманды);
	
		Если ИнформационнаяБазаФайловая() Тогда
			// В файловой информационной базе показывать окно консоли не следует и в серверном контексте.
			Попытка
				Оболочка = Новый COMОбъект("Wscript.Shell");
				КодВозврата = Оболочка.Run(СтрокаКоманды, 0, Истина); // Число
				Оболочка = Неопределено;
			Исключение
				Оболочка = Неопределено;
				
				ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ТекстОшибки = СтрШаблон("Не удалось запустить программу: 
				|%1", ТекстОшибки);
				ВызватьИсключение ТекстОшибки;
			КонецПопытки;
		Иначе
			ЗапуститьПриложение(СтрокаКоманды, , Истина, КодВозврата);
		КонецЕсли;
	Иначе	
		Кодировка = КодировкаТекста.UTF8;
		ЗапуститьПриложение(СтрокаКоманды, , Истина, КодВозврата);
	КонецЕсли;
	
	Ошибки = ПрочитатьФайлЕслиСуществует(ИмяФайлаПотокаОшибок, Кодировка);
	УдалитьФайлЕслиСуществует(ИмяФайлаПотокаОшибок);
	
	Результат = НовыйРезультатЗапускаПрограммы();
	Результат.КодВозврата = КодВозврата;
	Результат.ПотокОшибок = Ошибки;
	
	Возврат Результат;
	
КонецФункции

// Это ошибка утилиты.
// 
// Параметры:
//  ТекстОшибки - Строка - Текст ошибки
// 
// Возвращаемое значение:
//  Булево - Это ошибка утилиты
Функция ЭтоОшибкаУтилиты(ТекстОшибки)
	ИскомаяПодстрока = "curl";
	Возврат СтрНачинаетсяС(ТекстОшибки, ИскомаяПодстрока);	
КонецФункции

// Новый результат запуска программы.
// 
// Возвращаемое значение:
//  Структура - Новый результат запуска программы:
//		* КодВозврата - Число - Код возврата
//		* ПотокОшибок - Строка - Ошибки исполнения программы, направленные в поток stderr.
Функция НовыйРезультатЗапускаПрограммы()
	Результат = Новый Структура();
	Результат.Вставить("КодВозврата", 0);
	Результат.Вставить("ПотокОшибок", "");
	Возврат Результат;
КонецФункции

// (HTTP, FTP) Читает файл с заголовками ответа.
Процедура ПрочитатьЗаголовкиОтвета()
			
	ЗаголовкиОтвета.Очистить();
	
	Если ЭтоHTTP() Тогда
		ПрочитатьЗаголовкиОтветаHTTP();	
	ИначеЕсли ЭтоFTP() Тогда
		ПрочитатьЗаголовкиОтветаFTP();
	Иначе
		// Не реализовано чтение заголовков ответа
	КонецЕсли;
	
	УдалитьФайлЕслиСуществует(ПутьКЗаголовкамОтвета);
		
КонецПроцедуры

Процедура ПрочитатьЗаголовкиОтветаHTTP()
	
	Если Не ФайлСуществует(ПутьКЗаголовкамОтвета) Тогда
		Возврат;	
	КонецЕсли;
	
	Текст = Новый ЧтениеТекста(ПутьКЗаголовкамОтвета, КодировкаТекста.UTF8);
	
	Строка = Текст.ПрочитатьСтроку();
	Пока Строка <> Неопределено Цикл
		
		Если СтрНайти(Строка, "HTTP/") = 1 Тогда
			Подстроки = СтрРазделить(Строка, " ");
			КодСостояния = Число(Подстроки[1]);
			ЗаголовкиОтвета.Очистить();
		КонецЕсли;
		
		ПозицияДвоеточия = СтрНайти(Строка, ":");
		Если ПозицияДвоеточия Тогда
			ИмяЗаголовка = НРег(Сред(Строка, 1, ПозицияДвоеточия - 1));
			Значение = СокрЛП(Сред(Строка, ПозицияДвоеточия + 1));
			
			Если ЗаголовкиОтвета.Получить(ИмяЗаголовка) = Неопределено Тогда
				ЗаголовкиОтвета.Вставить(ИмяЗаголовка, Значение);
			ИначеЕсли ТипЗнч(ЗаголовкиОтвета[ИмяЗаголовка]) = Тип("Массив") Тогда
				МассивЗначений = ЗаголовкиОтвета[ИмяЗаголовка]; // Массив из Строка
				МассивЗначений.Добавить(Значение);
			Иначе
				ПервоеЗначение = ЗаголовкиОтвета[ИмяЗаголовка]; // Строка
				МассивЗначений = Новый Массив; // Массив из Строка
				МассивЗначений.Добавить(ПервоеЗначение);
				МассивЗначений.Добавить(Значение);
				ЗаголовкиОтвета.Вставить(ИмяЗаголовка, МассивЗначений);
			КонецЕсли;

		КонецЕсли;
		
		Строка = Текст.ПрочитатьСтроку();	
	КонецЦикла;
	
	Текст.Закрыть();
		
КонецПроцедуры

Процедура ПрочитатьЗаголовкиОтветаFTP()
	
	Если Не ЗначениеЗаполнено(ПутьКЗаголовкамОтвета) Тогда
		Возврат;	
	КонецЕсли;
	
	ДлинаКодаСостояния = 3;
	
	Текст = Новый ТекстовыйДокумент();
	Текст.Прочитать(ПутьКЗаголовкамОтвета, КодировкаТекста.UTF8);
	
	КоличествоСтрок = Текст.КоличествоСтрок();
	Если КоличествоСтрок > 0 Тогда
		ПоследняяСтрока = Текст.ПолучитьСтроку(КоличествоСтрок);
		Код = Лев(ПоследняяСтрока, ДлинаКодаСостояния);
		Если ТолькоЦифрыВСтроке(Код) Тогда
			КодСостояния = Число(Код);
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

// (HTTP) Парсит заголовки из текста. 
// Текст должен содежрать пары ключ-значение. Значение от ключа должно быть разделено двоеточием. 
// Пары должны быть разделены символом переноса.
// 
// Параметры:
//  Текст - Строка - Текст
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение
Функция ЗаголовкиИзТекста(Текст)
	
	Заголовки = Новый Соответствие();
	
	Для НомерСтроки = 1 По СтрЧислоСтрок(Текст) Цикл
		
		Строка = СтрПолучитьСтроку(Текст, НомерСтроки);
		ПозицияДвоеточия = СтрНайти(Строка, ":");
		Если ПозицияДвоеточия Тогда
			Имя = СокрЛП(Сред(Строка, 1, ПозицияДвоеточия - 1));
			Значение = СокрЛП(Сред(Строка, ПозицияДвоеточия + 1));
			Заголовки.Вставить(Имя, Значение);
		КонецЕсли;
				
	КонецЦикла;
	
	Возврат Заголовки;
	
КонецФункции

Процедура ОбновитьИменаЗаголовковВВерхнемРегистре()
	
	ИменаЗаголовковЗапросаВНижнемРегистре.Очистить();
	
	Для Каждого КлючИЗначение Из ЗаголовкиЗапроса Цикл
		ИмяЗаголовка = КлючИЗначение.Ключ; // Строка
		ИменаЗаголовковЗапросаВНижнемРегистре.Вставить(НРег(ИмяЗаголовка), ИмяЗаголовка);
	КонецЦикла;
	
КонецПроцедуры

// Преобразует структуру в тело запроса.
// 
// Параметры:
//  Тело	- Структура
//  		- Соответствие из КлючИЗначение
// 
// Возвращаемое значение:
//  Строка
Функция СтруктураВТелоЗапроса(Тело)

	ТелоЗапроса = "";

	Для Каждого КлючИЗначение Из Тело Цикл	
		Значение = КодироватьСтроку(XMLСтрока(КлючИЗначение.Значение), СпособКодированияСтроки.КодировкаURL);

		ТелоЗапроса = ТелоЗапроса 
			+ ?(ТелоЗапроса = "", "", "&")
			+ КлючИЗначение.Ключ + "=" + Значение;	
	КонецЦикла;	
	
	Возврат ТелоЗапроса;
	
КонецФункции

// Новая basic-аутентификация.
// 
// Возвращаемое значение:
//  Структура - Новая аутентификация Basic:
//		* Метод - Строка - Метод аутентификации
//		* ИмяПользователя - Строка - Имя пользователя
//		* Пароль - Строка - Пароль
Функция НоваяАутентификацияBasic()
	ПустаяАутентификация = НоваяАутентификацияАбстрактная();
	ПустаяАутентификация.Метод = МетодАутентификацииBasic();
	ПустаяАутентификация.Вставить("ИмяПользователя", "");
	ПустаяАутентификация.Вставить("Пароль", "");
	Возврат ПустаяАутентификация;	
КонецФункции

// Новая digest-аутентификация.
// 
// Возвращаемое значение:
//  Структура - Новая аутентификация Digest:
//		* Метод - Строка - Метод аутентификации
//		* ИмяПользователя - Строка - Имя пользователя
//		* Пароль - Строка - Пароль
Функция НоваяАутентификацияDigest()
	ПустаяАутентификация = НоваяАутентификацияАбстрактная();
	ПустаяАутентификация.Метод = МетодАутентификацииDigest();
	ПустаяАутентификация.Вставить("ИмяПользователя", "");
	ПустаяАутентификация.Вставить("Пароль", "");
	Возврат ПустаяАутентификация;	
КонецФункции

// Новая AWS V4 Signature аутентификация.
// 
// Возвращаемое значение:
//  Структура - Новая AWS V4 Signature аутентификация:
//		* Метод - Строка - Метод аутентификации
//		* КлючДоступа - Строка - Ключ доступа
//		* СекретныйКлюч - Строка - Секретный ключ
//		* Регион - Строка - Регион
//		* Сервис - Строка - Сервис
Функция НоваяАутентификацияAWS4()
	ПустаяАутентификация = НоваяАутентификацияАбстрактная();
	ПустаяАутентификация.Метод = МетодАутентификацииAWS4();
	ПустаяАутентификация.Вставить("КлючДоступа", "");
	ПустаяАутентификация.Вставить("СекретныйКлюч", "");
	ПустаяАутентификация.Вставить("Регион", "");
	ПустаяАутентификация.Вставить("Сервис", "");
	Возврат ПустаяАутентификация;	
КонецФункции

// Новая аутентификация.
// 
// Возвращаемое значение:
//  Структура - Новая аутентификация:
// 		* Метод - Строка - Метод аутентификации: 
// 			см. МетодАутентификацииBasic 
// 			см. МетодАутентификацииDigest
//			см. МетодАутентификацииAWS4
Функция НоваяАутентификацияАбстрактная()
	ПустаяАутентификация = Новый Структура();
	ПустаяАутентификация.Вставить("Метод", "");
	Возврат ПустаяАутентификация;	
КонецФункции

Функция МетодАутентификацииBasic()
	Возврат "basic";	
КонецФункции

Функция МетодАутентификацииDigest()
	Возврат "digest";	
КонецФункции

Функция МетодАутентификацииAWS4()
	Возврат "aws-sigv4";	
КонецФункции

// Обернуть кавычками строку.
// 
// Параметры:
//  Строка - Строка - Строка
// 
// Возвращаемое значение:
//  Строка - Обернуть кавычками
Функция ОбернутьКавычками(Строка)
	Возврат """" + Строка + """";
КонецФункции

Функция ЭтоHTTP()
	Возврат СхемаURL = "HTTP" Или СхемаURL = "HTTPS";
КонецФункции

Функция ЭтоFTP()
	Возврат СхемаURL = "FTP";
КонецФункции

Процедура ПрочитатьСхемуURL(URL)
	СхемаURL = ПолучитьСхемуURL(URL);
КонецПроцедуры

// Возвращает схему URL.
// 
// Параметры:
//  URL - Строка - Адрес ресурса в сети Интернет
// 
// Возвращаемое значение:
//  Строка - схема URL
Функция ПолучитьСхемуURL(URL)
	
	Схема = "";
	Позиция = СтрНайти(URL, "://");
	Если Позиция > 0 Тогда
		Схема = НРег(Лев(URL, Позиция - 1));
	КонецЕсли;
	
	Возврат ВРег(Схема);
		
КонецФункции

// Новое описание сертификата клиента.
// 
// Возвращаемое значение:
//  Структура - Новый сертификат клиента:
//		* ИмяФайлаСертификата - Строка - Имя файла сертификата клиента
//		* Пароль - Строка - Пароль сертификата
//		* ТипСертификата - Строка - Тип сертификата. Варианты: PEM, DER, ENG, P12
//		* ИмяФайлаЗакрытогоКлюча - Строка - Имя файла закрытого ключа сертификата
//		* КодовоеСлово - Строка - Строка - Кодовое слово для закрытого ключа (passphrase)
//		* ТипЗакрытогоКлюча - Строка - Тип закрытого ключа. Если не указано, то предполагается тип PEM.
//                                     Варианты: DER, PEM, ENG
Функция НовыйСертификатКлиента()
	Сертификат = Новый Структура();
	Сертификат.Вставить("ИмяФайлаСертификата", "");	
	Сертификат.Вставить("Пароль", "");
	Сертификат.Вставить("ТипСертификата", "");
	Сертификат.Вставить("ИмяФайлаЗакрытогоКлюча", "");
	Сертификат.Вставить("КодовоеСлово", "");
	Сертификат.Вставить("ТипЗакрытогоКлюча", "");
	Возврат Сертификат;
КонецФункции

// Новое описание сертификатов удостоверяющих центров.
// 
// Возвращаемое значение:
//  Структура - Новый сертификаты удостоверяющих центров:
//		* ИмяФайла - Строка - Имя файла содержащий сертификаты удостоверяющих центров в формате PEM
//		* ИспользоватьИзХранилищаСертификатовОС - Булево - Использовать из системного хранилища сертификатов ОС
Функция НовыйСертификатыУдостоверяющихЦентров()
	Описание = Новый Структура();
	Описание.Вставить("ИмяФайла", "");	
	Описание.Вставить("ИспользоватьИзХранилищаСертификатовОС", Ложь);	
	Возврат Описание;	
КонецФункции

// Новое описание прокси.
// 
// Возвращаемое значение:
//  Структура - Новый прокси:
//		* Протокол - Строка - Протокол
//		* Хост - Строка - Хост
//		* Порт - Число - Порт
//		* Аутентификация - см. НоваяАутентификацияАбстрактная
//		* СертификатКлиента - см. НовыйСертификатКлиента
// 		* СертификатыУдостоверяющихЦентров - см. НовыйСертификатыУдостоверяющихЦентров
Функция НовыйПрокси()

	НовыйПрокси = Новый Структура();
	НовыйПрокси.Вставить("Протокол", "");
	НовыйПрокси.Вставить("Хост", "");
	НовыйПрокси.Вставить("Порт", 0);
	НовыйПрокси.Вставить("Аутентификация", НоваяАутентификацияАбстрактная());
	НовыйПрокси.Вставить("СертификатКлиента", НовыйСертификатКлиента());
	НовыйПрокси.Вставить("СертификатыУдостоверяющихЦентров", НовыйСертификатыУдостоверяющихЦентров());
	Возврат НовыйПрокси;
	
КонецФункции

// Новые настройки повторных попыток.
// 
// Возвращаемое значение:
//  Структура - Настройки повторных попыток:
//		* КоличествоПопыток - Число - Количество попыток
//		* Задержка - Число - Задержка
//		* Таймаут - Число - Секунд
Функция НовыеНастройкиПовторныхПопыток()
	
	Параметры = Новый Структура();
	Параметры.Вставить("КоличествоПопыток", 0);
	Параметры.Вставить("Задержка", 0);
	Параметры.Вставить("Таймаут", 0);
	
	Возврат Параметры;
		
КонецФункции

// Новые настройки перенаправления.
// 
// Возвращаемое значение:
//  Структура - Новые настройки перенаправления:
//		* Перенаправлять - Булево - Перенаправлять
//		* ПередаватьДанныеАутентификации - Булево - Передавать данные аутентификации на другой хост
//		* МаксимальноеКоличествоПеренаправлений - Число - Максимальное количество перенаправлений
Функция НовыеНастройкиПеренаправления()
	
	Параметры = Новый Структура();
	Параметры.Вставить("Перенаправлять", Ложь);
	Параметры.Вставить("ПередаватьДанныеАутентификации", Ложь);
	Параметры.Вставить("МаксимальноеКоличествоПеренаправлений", 0);
	
	Возврат Параметры;
		
КонецФункции

// Заполняет дополнительные заголовки запроса.
// 
// Параметры:
//  Данные - Произвольный - Данные
Процедура ЗаполнитьДополнительныеЗаголовкиЗапроса(Данные)
	ЗаголовкиЗапросаДополнительные.Очистить();
	УстановитьПоОтправляемымДаннымЗаголовокContentType(Данные);
КонецПроцедуры

// Устанавливает по отправляемым данным заголовок запроса Content-Type.
// 
// Параметры:
//  Данные - Произвольный - Данные
// 
Процедура УстановитьПоОтправляемымДаннымЗаголовокContentType(Данные)
	
	ИмяЗаголовка = "Content-Type";
	
	Если ЗначениеЗаполнено(Заголовок(ИмяЗаголовка)) Тогда
		Возврат
	КонецЕсли;
	
	ТипMIME = ОпределитьПоДаннымТипMIME(Данные);
	Если Не ПустаяСтрока(ТипMIME) Тогда
		ЗаголовкиЗапросаДополнительные.Вставить(ИмяЗаголовка, ТипMIME);
	КонецЕсли;
	
КонецПроцедуры

// Определить по данным MIME-тип.
// 
// Параметры:
//  Данные - Произвольный - Данные
// 
// Возвращаемое значение:
//  Строка - MIME-тип
Функция ОпределитьПоДаннымТипMIME(Данные)
	
	ТипДанных = ТипЗнч(Данные);
	
	ЭтоДвоичныеДанные = 
		ТипДанных = Тип("ДвоичныеДанные")
		Или ТипДанных = Тип("Файл")
		Или ТипДанных = Тип("Строка") 
			И (
				ЭтоАдресВременногоХранилища(Данные) // Предполагается хранение двоичных данных
				Или ФайлСуществует(Данные)
			);
		
	Если ЭтоДвоичныеДанные Тогда
		Возврат "application/octet-stream";		
	КонецЕсли;
	
	Возврат "";
		
КонецФункции

// Этот объект.
// 
// Возвращаемое значение:
//  ОбработкаОбъектИмяОбработки, ВнешняяОбработка - Этот объект
Функция ЭтотОбъект()
	Возврат ЭтотОбъект;
КонецФункции

#Область РаботаСФайлами

// Возвращает имя временного файла.
// 
// Параметры:
//  Расширение - Строка - Расширение файла
// 
// Возвращаемое значение:
//  Строка - имя временного файла
Функция НовоеИмяВременногоФайла(Расширение = "")
	//@skip-check missing-temporary-file-deletion
	Имя = ПолучитьИмяВременногоФайла(Расширение);
	ВременныеФайлы.Вставить(Имя);
	Возврат Имя;
КонецФункции

// Удаляет артефакты выполнения запроса.
Процедура УдалитьАртефакты()
	
	Для Каждого Строка Из ВременныеФайлы Цикл
		Путь = Строка.Ключ; // Строка
		УдалитьФайлЕслиСуществует(Путь);
	КонецЦикла;
	
КонецПроцедуры

// Удаляет файл, если существует.
// 
// Параметры:
//  Путь - Строка - Путь к файлу
Процедура УдалитьФайлЕслиСуществует(Путь)
	
	Если Не ЗначениеЗаполнено(Путь) Тогда
		Возврат;
	КонецЕсли;

	Если ФайлСуществует(Путь) Тогда
		УдалитьФайлы(Путь);	
	КонецЕсли;
	
	ВременныеФайлы.Удалить(Путь);
	
	Путь = "";
	
КонецПроцедуры

// Удаляет файл если пустой.
// 
// Параметры:
//  Путь - Строка - Путь к файлу
Процедура УдалитьФайлЕслиПустой(Путь)
	
	Если Не ЗначениеЗаполнено(Путь) Тогда
		Возврат;
	КонецЕсли;
		
	Файл = Новый Файл(Путь);
	Если Файл.Существует() Тогда
		Если Файл.Размер() = 0 Тогда
			УдалитьФайлЕслиСуществует(Путь);	
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Путь = "";

КонецПроцедуры

// Возвращает содержимое файла.
// 
// Параметры:
//  Путь - Строка - Путь
//  Кодировка - КодировкаТекста - Кодировка
// 
// Возвращаемое значение:
//  Строка - Содержимое файла
Функция ПрочитатьФайлЕслиСуществует(Путь, Кодировка)
	
	Результат = "";

	Если ФайлСуществует(Путь) Тогда 
		
		ЧтениеПотокаОшибок = Новый ЧтениеТекста(Путь, Кодировка);
		РезультатЧтения = ЧтениеПотокаОшибок.Прочитать();	
		Если ТипЗнч(РезультатЧтения) = Тип("Строка") Тогда 
			Результат = РезультатЧтения;
		КонецЕсли;
	
		ЧтениеПотокаОшибок.Закрыть();
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Прочитать файл JSON.
// 
// Параметры:
//  ПутьКФайлу - Строка - Путь к файлу
// 
// Возвращаемое значение:
//  Произвольный
Функция ПрочитатьФайлJSON(ПутьКФайлу)
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.ОткрытьФайл(ПутьКФайлу);
	
	Результат = ПрочитатьJSON(ЧтениеJSON, Истина);

	ЧтениеJSON.Закрыть();
	
	Возврат Результат;
	
КонецФункции

// Проверяет, что файл существует.
// 
// Параметры:
//  ПутьКФайлу - Строка - Путь к файлу
// 
// Возвращаемое значение:
//  Булево - Файл существует
Функция ФайлСуществует(ПутьКФайлу)
	
	Если Не ЗначениеЗаполнено(ПутьКФайлу) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Файл = Новый Файл(ПутьКФайлу);
	Возврат Файл.Существует();
	
КонецФункции

#КонецОбласти

#Область ПодготовкаКоманды
	
// Возвращает имя команды curl.
// 
// Возвращаемое значение:
//  Строка - Имя команды curl
Функция ИмяКоманды()

	Если ЗначениеЗаполнено(ПутьКИсполняемомуФайлу) Тогда
		Имя = ОбернутьКавычками(ПутьКИсполняемомуФайлу);
	Иначе
		Имя = "curl";
	КонецЕсли;
		
	Возврат Имя;
	
КонецФункции

// Добавляет URL в список опций команды.
// 
// Параметры:
//  Опции - Соответствие из КлючИЗначение - Опции команды curl
//  URL - Строка - Адрес ресурса в сети Интернет
Процедура ДобавитьОпциюURL(Опции, URL)
	ДобавитьОпциюВСписок(Опции, "--url", URL);	
КонецПроцедуры

// Добавляет метод запроса в список опций команды.
// 
// Параметры:
//  Опции - Соответствие из КлючИЗначение - Опции команды curl
//  Метод - Строка - Метод
Процедура ДобавитьОпциюМетодЗапроса(Опции, Метод)
	
	Если Не ЗначениеЗаполнено(Метод) Или Метод = "GET" Тогда
		Возврат;	
	КонецЕсли;
	
	ДобавитьОпциюВСписок(Опции, "--request", Метод);
	
КонецПроцедуры

// Добавляет заголовки в список опций команды.
// 
// Параметры:
//  Опции - Соответствие из КлючИЗначение - Опции команды curl
Процедура ДобавитьОпциюЗаголовки(Опции)
	
	Если Не ЭтоHTTP() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЗаголовкиЗапроса)
		И Не ЗначениеЗаполнено(ЗаголовкиЗапросаДополнительные) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаголовкиЗапросаОбъединенные = Новый Соответствие();
	ДополнитьСоответствие(ЗаголовкиЗапросаОбъединенные, ЗаголовкиЗапроса);
	ДополнитьСоответствие(ЗаголовкиЗапросаОбъединенные, ЗаголовкиЗапросаДополнительные);
		
	ЗаголовкиТекст = "";
	Для Каждого КлючИЗначение Из ЗаголовкиЗапросаОбъединенные Цикл
		ЗаголовкиТекст = ЗаголовкиТекст 
			+ СтрШаблон("%1: %2", КлючИЗначение.Ключ, КлючИЗначение.Значение)
			+ Символы.ПС;	
	КонецЦикла;
	
	ПутьКЗаголовкамЗапроса = НовоеИмяВременногоФайла();
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент();
	ТекстовыйДокумент.УстановитьТекст(ЗаголовкиТекст);
	ТекстовыйДокумент.Записать(ПутьКЗаголовкамЗапроса, "CESU-8");
	
	ДобавитьОпциюВСписок(Опции, "--header", "@" + ПутьКЗаголовкамЗапроса);
	
КонецПроцедуры

// Добавляет шифры в список опций команды.
// 
// Параметры:
//  Опции - Соответствие из КлючИЗначение - Опции команды curl
Процедура ДобавитьОпциюНаборыШифров(Опции)
	
	Если Не НаборыШифров.Количество() Тогда
		Возврат;
	КонецЕсли;
		
	Шифры = СтрСоединить(НаборыШифров, ",");
	ДобавитьОпциюВСписок(Опции, "--ciphers", Шифры);
	
КонецПроцедуры

// Добавляет безопасно данные запроса в список опций команды.
// 
// Параметры:
//  Опции - Соответствие из КлючИЗначение - Опции команды curl
//  Данные - Строка - Простой текст, путь к файлу, адрес двоичных данных во временном хранилище
//         - Структура
//         - Соответствие из КлючИЗначение
//         - ДвоичныеДанные
//         - Файл
//         - Неопределено
//	Метод - Строка - Метод
Процедура ДобавитьОпциюДанныеЗапросаБезопасно(Опции, Данные, Метод)

	Если Не Данные = Неопределено Тогда
		Попытка
			ДобавитьОпциюДанныеЗапроса(Опции, Данные, Метод);
		Исключение
			УдалитьАртефакты();
			
			ТекстОшибки = СтрШаблон("Не удалось подготовить данные для запроса: 
			|%1", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ВызватьИсключение ТекстОшибки;			
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры
	
// Добавляет данные запроса в список опций команды.
// 
// Параметры:
//  Опции - Соответствие из КлючИЗначение - Опции команды curl
//  Данные - Строка - Простой текст, путь к файлу, адрес двоичных данных во временном хранилище
//         - Структура
//         - Соответствие из КлючИЗначение
//         - ДвоичныеДанные
//         - Файл
//         - Неопределено
//	Метод - Строка - Метод
Процедура ДобавитьОпциюДанныеЗапроса(Опции, Данные, Метод)
	
	Если Данные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТипДанных = ТипЗнч(Данные);
	Если ТипДанных = Тип("Строка") Тогда
		ДобавитьОпциюДанныеЗапросаСтрока(Опции, Данные, Метод);	
	ИначеЕсли ТипДанных = Тип("Структура") Или ТипДанных = Тип("Соответствие") Тогда		
		ДобавитьОпциюДанныеЗапросаСтруктура(Опции, Данные, Метод);
	ИначеЕсли ТипДанных = Тип("ДвоичныеДанные") Тогда
		ДобавитьОпциюДанныеЗапросаДвоичныеДанные(Опции, Данные, Метод);	
	ИначеЕсли ТипДанных = Тип("Файл") Тогда
		ДобавитьОпциюДанныеЗапросаФайл(Опции, Данные, Метод);	
	Иначе
		ВызватьИсключение СтрШаблон("Тип %1 не поддерживается в качестве тела запроса", ТипДанных);
	КонецЕсли;

КонецПроцедуры

// Добавляет текстовые данные запроса в список опций команды.
// 
// Параметры:
//  Опции - Соответствие из КлючИЗначение - Опции
//  Строка - Строка - Простой текст, путь к файлу, адрес двоичных данных во временном хранилище
//  Метод - Строка - Метод
Процедура ДобавитьОпциюДанныеЗапросаСтрока(Опции, Строка, Метод)
	
	Проверить(ТипЗнч(Строка) = Тип("Строка"), "Ожидалось получение текстовых данных");
	
	Если ЭтоАдресВременногоХранилища(Строка) Тогда
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(Строка); // ДвоичныеДанные
		ДобавитьОпциюДанныеЗапросаДвоичныеДанные(Опции, ДвоичныеДанные, Метод);	
	ИначеЕсли ФайлСуществует(Строка) Тогда
		Файл = Новый Файл(Строка);
		ДобавитьОпциюДанныеЗапросаФайл(Опции, Файл, Метод);
	Иначе
		ДобавитьОпциюВСписок(Опции, "--data-raw", Строка);
	КонецЕсли;
	
КонецПроцедуры

// Добавляет структурированные данные запроса в список опций команды.
// 
// Параметры:
//  Опции - Соответствие из КлючИЗначение - Опции
//  Структура - Структура
//            - Соответствие из КлючИЗначение
//  Метод - Строка - Метод
Процедура ДобавитьОпциюДанныеЗапросаСтруктура(Опции, Структура, Метод)
	
	Проверить(
		ТипЗнч(Структура) = Тип("Структура") Или ТипЗнч(Структура) = Тип("Соответствие"), 
		"Ожидалось получение структуры");
	
	ТелоЗапроса = СтруктураВТелоЗапроса(Структура);
	
	ДобавитьОпциюДанныеЗапросаСтрока(Опции, ТелоЗапроса, Метод);
	
КонецПроцедуры

// Добавляет двоичные данные запроса в список опций команды.
// 
// Параметры:
//  Опции - Соответствие из КлючИЗначение - Опции
//  ДвоичныеДанные - ДвоичныеДанные - Двоичные данные
//  Метод - Строка - Метод
Процедура ДобавитьОпциюДанныеЗапросаДвоичныеДанные(Опции, ДвоичныеДанные, Метод)
	
	Проверить(ТипЗнч(ДвоичныеДанные) = Тип("ДвоичныеДанные"), "Ожидалось получение двоичных данных");
	
	ПутьКТелуЗапроса = НовоеИмяВременногоФайла();	
	ДвоичныеДанные.Записать(ПутьКТелуЗапроса);
	Файл = Новый Файл(ПутьКТелуЗапроса);
	
	ДобавитьОпциюДанныеЗапросаФайл(Опции, Файл, Метод);
	
КонецПроцедуры

// Добавляет данные запроса с типом Файл в список опций команды.
// 
// Параметры:
//  Опции - Соответствие из КлючИЗначение - Опции
//  Файл - Файл - Файл
//  Метод - Строка - Метод
Процедура ДобавитьОпциюДанныеЗапросаФайл(Опции, Файл, Метод)
	
	Проверить(ТипЗнч(Файл) = Тип("Файл"), "Ожидалось получение файла");
	
	Если Файл.Существует() Тогда
		Если ЭтоHTTP() И Метод = "POST" Тогда
			ДобавитьОпциюВСписок(Опции, "--data-binary", "@" + Файл.ПолноеИмя);
		Иначе
			ДобавитьОпциюВСписок(Опции, "--upload-file", Файл.ПолноеИмя);
		КонецЕсли;
	Иначе
		ВызватьИсключение СтрШаблон("Файл '%1' не существует", Файл.ПолноеИмя);
	КонецЕсли;	
	
КонецПроцедуры

// (HTTP, FTP) Добавляет файл дампа заголовков в список опций команды.
// 
// Параметры:
//  Опции - Соответствие из КлючИЗначение - Опции команды curl
Процедура ДобавитьОпциюФайлДампаЗаголовков(Опции)
	
	Если Не (ЭтоHTTP() Или ЭтоFTP()) Тогда
		Возврат;
	КонецЕсли;
	
	ПутьКЗаголовкамОтвета = НовоеИмяВременногоФайла();
	ДобавитьОпциюВСписок(Опции, "--dump-header", ПутьКЗаголовкамОтвета);
	
КонецПроцедуры

// Добавляет аутентификацию в список опций команды.
// 
// Параметры:
//  Опции - Соответствие из КлючИЗначение - Опции команды curl
Процедура ДобавитьОпциюАутентификации(Опции)
	
	Если Аутентификация = Неопределено 
		Или ПустаяСтрока(Аутентификация.Метод) Тогда
		Возврат;	
	КонецЕсли;

	Если Аутентификация.Метод = МетодАутентификацииBasic() Тогда
		ДобавитьОпциюАутентификацииBasic(Опции);
	ИначеЕсли Аутентификация.Метод = МетодАутентификацииDigest() Тогда
		ДобавитьОпциюАутентификацииDigest(Опции);
	ИначеЕсли Аутентификация.Метод = МетодАутентификацииAWS4() Тогда
		ДобавитьОпциюАутентификацииAWS4(Опции);
	Иначе
		ВызватьИсключение СтрШаблон("Метод аутентификации '%1' не реализован", Аутентификация.Метод);
	КонецЕсли;
 	
КонецПроцедуры

// Добавляет basic-аутентификацию в список опций команды.
// 
// Параметры:
//  Опции - Соответствие из КлючИЗначение - Опции команды curl
Процедура ДобавитьОпциюАутентификацииBasic(Опции)
	
	АутентификацияBasic = Аутентификация; // см. НоваяАутентификацияBasic
	
	Значение = СтрШаблон("%1:%2", АутентификацияBasic.ИмяПользователя, АутентификацияBasic.Пароль);
	ДобавитьОпциюВСписок(Опции, "--user", Значение);

КонецПроцедуры

// (HTTP) Добавляет digest-аутентификацию в список опций команды.
// 
// Параметры:
//  Опции - Соответствие из КлючИЗначение - Опции команды curl
Процедура ДобавитьОпциюАутентификацииDigest(Опции)
	
	АутентификацияDigest = Аутентификация; // см. НоваяАутентификацияDigest
	
	Значение = СтрШаблон("%1:%2", АутентификацияDigest.ИмяПользователя, АутентификацияDigest.Пароль);
		
	ДобавитьОпциюВСписок(Опции, "--digest");	
	ДобавитьОпциюВСписок(Опции, "--user", Значение);

КонецПроцедуры

// (HTTP) Добавляет AWS V4 Signature аутентификацию в список опций команды.
// 
// Параметры:
//  Опции - Соответствие из КлючИЗначение - Опции команды curl
Процедура ДобавитьОпциюАутентификацииAWS4(Опции)
	
	АутентификацияAWS4 = Аутентификация; // см. НоваяАутентификацияAWS4
		
	// --aws-sigv4
	Значение = "aws:amz";
	
	Если ЗначениеЗаполнено(АутентификацияAWS4.Регион) Тогда
		Значение = Значение + ":" + АутентификацияAWS4.Регион;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АутентификацияAWS4.Сервис) Тогда
		Значение = Значение + ":" + АутентификацияAWS4.Сервис;	
	КонецЕсли;
		
	ДобавитьОпциюВСписок(Опции, "--aws-sigv4", Значение);
	
	// --user
	Значение = СтрШаблон("%1:%2", АутентификацияAWS4.КлючДоступа, АутентификацияAWS4.СекретныйКлюч);
	ДобавитьОпциюВСписок(Опции, "--user", Значение);

КонецПроцедуры

// (HTTP) Добавляет перенаправление запроса в список опций команды.
// 
// Параметры:
//  Опции - Соответствие из КлючИЗначение - Опции команды curl
Процедура ДобавитьОпциюПеренаправлениеЗапроса(Опции)
	
	Если Не ЭтоHTTP() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не НастройкиПеренаправления.Перенаправлять Тогда
		Возврат;
	КонецЕсли;
	
	Если НастройкиПеренаправления.ПередаватьДанныеАутентификации Тогда
		ДобавитьОпциюВСписок(Опции, "--location-trusted");	
	Иначе
		ДобавитьОпциюВСписок(Опции, "--location");	
	КонецЕсли;
	
	Если НастройкиПеренаправления.МаксимальноеКоличествоПеренаправлений <> 0 Тогда
		ДобавитьОпциюВСписок(Опции, "--max-redirs", НастройкиПеренаправления.МаксимальноеКоличествоПеренаправлений);	
	КонецЕсли;
 	
КонецПроцедуры

// Добавляет путь к выходному файлу в список опций команды.
// 
// Параметры:
//  Опции - Соответствие из КлючИЗначение - Опции команды curl
Процедура ДобавитьОпциюПутьКВыходномуФайлу(Опции)
	ПутьКРезультату = НовоеИмяВременногоФайла();
	ДобавитьОпциюВСписок(Опции, "--output", ПутьКРезультату);
КонецПроцедуры

// Добавляет сертификат клиента в список опций команды.
// 
// Параметры:
//  Опции - Соответствие из КлючИЗначение - Опции команды curl
Процедура ДобавитьОпциюСертификатаКлиента(Опции)
	
	Если Не ЗначениеЗаполнено(СертификатКлиента.ИмяФайлаСертификата) Тогда
		Возврат;
	КонецЕсли;
	
	// --cert
	Значение = СтрШаблон("%1:%2", СертификатКлиента.ИмяФайлаСертификата, СертификатКлиента.Пароль);	
	ДобавитьОпциюВСписок(Опции, "--cert", Значение);
	
	// --cert-type
	Если ЗначениеЗаполнено(СертификатКлиента.ТипСертификата) Тогда
		ДобавитьОпциюВСписок(Опции, "--cert-type", СертификатКлиента.ТипСертификата);	
	КонецЕсли;
	
КонецПроцедуры

// Добавляет закрытый ключ сертификата в список опций команды.
// 
// Параметры:
//  Опции - Соответствие из КлючИЗначение - Опции команды curl
Процедура ДобавитьОпциюЗакрытогоКлючаСертификата(Опции)
	
	Если Не ЗначениеЗаполнено(СертификатКлиента.ИмяФайлаЗакрытогоКлюча) Тогда
		Возврат;
	КонецЕсли;

	ДобавитьОпциюВСписок(Опции, "--key", СертификатКлиента.ИмяФайлаЗакрытогоКлюча);
	
	Если ЗначениеЗаполнено(СертификатКлиента.КодовоеСлово) Тогда
		ДобавитьОпциюВСписок(Опции, "--pass", СертификатКлиента.КодовоеСлово);	
	КонецЕсли;
		
	Если ЗначениеЗаполнено(СертификатКлиента.ТипЗакрытогоКлюча) Тогда
		ДобавитьОпциюВСписок(Опции, "--key-type", СертификатКлиента.ТипЗакрытогоКлюча);	
	КонецЕсли;
	
КонецПроцедуры

// Добавляет сертификаты удостоверяющих центров в список опций команды.
// 
// Параметры:
//  Опции - Соответствие из КлючИЗначение - Опции команды curl
Процедура ДобавитьОпциюСертификатовУдостоверяющихЦентров(Опции)
	
	Если СертификатыУдостоверяющихЦентров.ИспользоватьИзХранилищаСертификатовОС Тогда
		ДобавитьОпциюВСписок(Опции, "--ca-native");
	ИначеЕсли ЗначениеЗаполнено(СертификатыУдостоверяющихЦентров.ИмяФайла) Тогда
		ДобавитьОпциюВСписок(Опции, "--cacert", СертификатыУдостоверяющихЦентров.ИмяФайла);
	КонецЕсли;
	
КонецПроцедуры

// Добавляет параметры прокси-сервера в список опций команды.
// 
// Параметры:
//  Опции - Соответствие из КлючИЗначение - Опции команды curl
Процедура ДобавитьОпциюПрокси(Опции)

	Если Не ЗначениеЗаполнено(Прокси.Хост) Тогда
		Возврат;
	КонецЕсли;
	
	АдресПрокси = Прокси.Хост;
	Если ЗначениеЗаполнено(Прокси.Протокол) Тогда
		АдресПрокси = СтрШаблон("%1://%2", Прокси.Протокол, АдресПрокси);	
	КонецЕсли;

	Если ЗначениеЗаполнено(Прокси.Порт) Тогда
		АдресПрокси = СтрШаблон("%1:%2", АдресПрокси, Формат(Прокси.Порт, "ЧГ="));	
	КонецЕсли;
		
	ДобавитьОпциюВСписок(Опции, "--proxy", АдресПрокси);
	
КонецПроцедуры

// Добавляет аутентификацию прокси-сервера в список опций команды.
// 
// Параметры:
//  Опции - Соответствие из КлючИЗначение - Опции команды curl
Процедура ДобавитьОпциюАутентификацииПрокси(Опции)
	
	Если ПустаяСтрока(Прокси.Аутентификация.Метод) Тогда
		Возврат;	
	КонецЕсли;
		
	Если Прокси.Аутентификация.Метод = МетодАутентификацииBasic() Тогда
		ДобавитьОпциюАутентификацииПроксиBasic(Опции);
	ИначеЕсли Прокси.Аутентификация.Метод = МетодАутентификацииDigest() Тогда
		ДобавитьОпциюАутентификацииПроксиDigest(Опции);
	Иначе
		ВызватьИсключение СтрШаблон("Метод аутентификации на прокси-сервере '%1' не реализован", Аутентификация.Метод);
	КонецЕсли;

КонецПроцедуры

// Добавляет basic-аутентификацию прокси-сервера в список опций команды.
// 
// Параметры:
//  Опции - Соответствие из КлючИЗначение - Опции команды curl
Процедура ДобавитьОпциюАутентификацииПроксиBasic(Опции)
			
	АутентификацияBasic = Прокси.Аутентификация; // см. НоваяАутентификацияBasic
	
	Если Не ЗначениеЗаполнено(АутентификацияBasic.ИмяПользователя) Тогда
		Возврат;
	КонецЕсли;
	
	Значение = СтрШаблон("%1:%2", АутентификацияBasic.ИмяПользователя, АутентификацияBasic.Пароль);
	ДобавитьОпциюВСписок(Опции, "--proxy-user", Значение);

КонецПроцедуры

// (HTTP) Добавляет digest-аутентификацию прокси-сервера в список опций команды.
// 
// Параметры:
//  Опции - Соответствие из КлючИЗначение - Опции команды curl
Процедура ДобавитьОпциюАутентификацииПроксиDigest(Опции)
	
	АутентификацияDigest = Прокси.Аутентификация; // см. НоваяАутентификацияDigest
	
	Если Не ЗначениеЗаполнено(АутентификацияDigest.ИмяПользователя) Тогда
		Возврат;
	КонецЕсли;		
	
	Значение = СтрШаблон("%1:%2", АутентификацияDigest.ИмяПользователя, АутентификацияDigest.Пароль);
		
	ДобавитьОпциюВСписок(Опции, "--proxy-digest");	
	ДобавитьОпциюВСписок(Опции, "--proxy-user", Значение);

КонецПроцедуры

// Добавляет сертификат клиента для прокси-сервера в список опций команды.
// 
// Параметры:
//  Опции - Соответствие из КлючИЗначение - Опции команды curl
Процедура ДобавитьОпциюСертификатаКлиентаПрокси(Опции)
	
	Если Не ЗначениеЗаполнено(Прокси.СертификатКлиента.ИмяФайлаСертификата) Тогда
		Возврат;
	КонецЕсли;
	
	Значение = СтрШаблон("%1:%2", Прокси.СертификатКлиента.ИмяФайлаСертификата, Прокси.СертификатКлиента.Пароль);	
	ДобавитьОпциюВСписок(Опции, "--proxy-cert", Значение);
	
	Если ЗначениеЗаполнено(Прокси.СертификатКлиента.ТипСертификата) Тогда
		ДобавитьОпциюВСписок(Опции, "--proxy-cert-type", Прокси.СертификатКлиента.ТипСертификата);	
	КонецЕсли;
	
КонецПроцедуры

// Добавляет закрытый ключ сертификата для прокси-сервера в список опций команды.
// 
// Параметры:
//  Опции - Соответствие из КлючИЗначение - Опции команды curl
Процедура ДобавитьОпциюЗакрытогоКлючаСертификатаПрокси(Опции)
	
	Если Не ЗначениеЗаполнено(Прокси.СертификатКлиента.ИмяФайлаЗакрытогоКлюча) Тогда
		Возврат;
	КонецЕсли;

	ДобавитьОпциюВСписок(Опции, "--proxy-key", Прокси.СертификатКлиента.ИмяФайлаЗакрытогоКлюча);
	
	Если ЗначениеЗаполнено(Прокси.СертификатКлиента.КодовоеСлово) Тогда
		ДобавитьОпциюВСписок(Опции, "--proxy-pass", Прокси.СертификатКлиента.КодовоеСлово);	
	КонецЕсли;
		
	Если ЗначениеЗаполнено(Прокси.СертификатКлиента.ТипЗакрытогоКлюча) Тогда
		ДобавитьОпциюВСписок(Опции, "--proxy-key-type", Прокси.СертификатКлиента.ТипЗакрытогоКлюча);	
	КонецЕсли;
	
КонецПроцедуры

// Добавляет сертификаты удостоверяющих центров для прокси-сервера в список опций команды.
// 
// Параметры:
//  Опции - Соответствие из КлючИЗначение - Опции команды curl
Процедура ДобавитьОпциюСертификатовУдостоверяющихЦентровПрокси(Опции)
	
	Если Прокси.СертификатыУдостоверяющихЦентров.ИспользоватьИзХранилищаСертификатовОС Тогда
		ДобавитьОпциюВСписок(Опции, "--proxy-ca-native");
	ИначеЕсли ЗначениеЗаполнено(Прокси.СертификатыУдостоверяющихЦентров.ИмяФайла) Тогда
		ДобавитьОпциюВСписок(Опции, "--proxy-cacert", Прокси.СертификатыУдостоверяющихЦентров.ИмяФайла);
	КонецЕсли;
	
КонецПроцедуры

// Добавляет опцию тихий режим в список опций команды.
// 
// Параметры:
//  Опции - Соответствие из КлючИЗначение - Опции команды curl
Процедура ДобавитьОпциюТихийРежим(Опции)
	ДобавитьОпциюВСписок(Опции, "--silent");
КонецПроцедуры

// Добавляет опцию показывать ошибки в список опций команды.
// 
// Параметры:
//  Опции - Соответствие из КлючИЗначение - Опции команды curl
Процедура ДобавитьОпциюПоказыватьОшибки(Опции)
	ДобавитьОпциюВСписок(Опции, "--show-error");
КонецПроцедуры

// Добавляет опцию таймаута в список опций команды.
// 
// Параметры:
//  Опции - Соответствие из КлючИЗначение - Опции команды curl
Процедура ДобавитьОпциюТаймаут(Опции)
	
	Если Не ЗначениеЗаполнено(Таймаут) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьОпциюВСписок(Опции, "--max-time", Таймаут);
	
КонецПроцедуры

// Добавляет опцию таймаута соединения в список опций команды.
// 
// Параметры:
//  Опции - Соответствие из КлючИЗначение - Опции команды curl
Процедура ДобавитьОпциюТаймаутСоединения(Опции)
	
	Если Не ЗначениеЗаполнено(ТаймаутСоединения) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьОпциюВСписок(Опции, "--connect-timeout", ТаймаутСоединения);
	
КонецПроцедуры

// Добавляет опцию количества повторных попыток в список опций команды.
// 
// Параметры:
//  Опции - Соответствие из КлючИЗначение - Опции команды curl
Процедура ДобавитьОпциюКоличествоПовторныхПопыток(Опции)
	
	Если Не ЗначениеЗаполнено(НастройкиПовторныхПопыток.КоличествоПопыток) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьОпциюВСписок(Опции, "--retry", НастройкиПовторныхПопыток.КоличествоПопыток);
	
КонецПроцедуры

// Добавляет опцию задержки повторной попытки в список опций команды.
// 
// Параметры:
//  Опции - Соответствие из КлючИЗначение - Опции команды curl
Процедура ДобавитьОпциюЗадержкаПовторнойПопытки(Опции)
	
	Если Не ЗначениеЗаполнено(НастройкиПовторныхПопыток.КоличествоПопыток) 
		Или Не ЗначениеЗаполнено(НастройкиПовторныхПопыток.Задержка) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьОпциюВСписок(Опции, "--retry-delay", НастройкиПовторныхПопыток.Задержка);
	
КонецПроцедуры

// Добавляет опцию таймаута повторных попыток выполнения запроса в список опций команды.
// 
// Параметры:
//  Опции - Соответствие из КлючИЗначение - Опции команды curl
Процедура ДобавитьОпциюТаймаутПовторныхПопыток(Опции)
	
	Если Не ЗначениеЗаполнено(НастройкиПовторныхПопыток.КоличествоПопыток) 
		Или Не ЗначениеЗаполнено(НастройкиПовторныхПопыток.Таймаут) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьОпциюВСписок(Опции, "--retry-max-time", НастройкиПовторныхПопыток.Таймаут);
	
КонецПроцедуры

// Добавляет опцию ограничения скорости передачи данных в список опций команды.
// 
// Параметры:
//  Опции - Соответствие из КлючИЗначение - Опции команды curl
Процедура ДобавитьОпциюОграниченияСкорости(Опции)
	
	Если Не ЗначениеЗаполнено(МаксимальнаяСкоростьПередачиДанных) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьОпциюВСписок(Опции, "--limit-rate", МаксимальнаяСкоростьПередачиДанных);
	
КонецПроцедуры

// Добавляет опцию прерывания медленной передачи данных в список опций команды.
// 
// Параметры:
//  Опции - Соответствие из КлючИЗначение - Опции команды curl
Процедура ДобавитьОпциюПрерыванияМедленнойПередачиДанных(Опции)
	
	Если Не ЗначениеЗаполнено(МинимальнаяСкоростьПередачиДанных) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьОпциюВСписок(Опции, "--speed-limit", МинимальнаяСкоростьПередачиДанных);
	
	Если ЗначениеЗаполнено(СекундДляОценкиМинимальнойСкорости) Тогда
		ДобавитьОпциюВСписок(Опции, "--speed-time", СекундДляОценкиМинимальнойСкорости);
	КонецЕсли;
	
КонецПроцедуры

// Добавляет опцию в список.
// 
// Параметры:
//  Опции - Соответствие из КлючИЗначение - Опции
//  Имя - Строка - Имя опции
//  Значение - Строка, Число, Неопределено - Значение опции
Процедура ДобавитьОпциюВСписок(Опции, Знач Имя, Значение = Неопределено)	
	Имя = НРег(СокрЛП(Имя));	
	Опции.Вставить(Имя, Значение);		
КонецПроцедуры

// Конвертирует опции команды curl в строку.
// 
// Параметры:
//  Опции - Соответствие из КлючИЗначение - Опции команды curl
// 
// Возвращаемое значение:
//  Строка
Функция ОпцииВСтроку(Опции)
	
	СтрокаОпций = "";
	Для Каждого КлючИЗначение Из Опции Цикл

		СтрокаОпций = СтрокаОпций 
			+ ?(СтрокаОпций = "", "", " ")
			+ КлючИЗначение.Ключ;
			
		Значение = КлючИЗначение.Значение; // Строка, Число, Неопределено
		Если Не ЗначениеЗаполнено(Значение) Тогда
			Продолжить;	
		КонецЕсли;
		
		ТипЗначения = ТипЗнч(Значение);
		Если ТипЗначения = Тип("Строка") Тогда
			СтрокаОпций = СтрокаОпций + " " + ОбернутьКавычками(Значение);	
		ИначеЕсли ТипЗначения = Тип("Число") Тогда
			СтрокаОпций = СтрокаОпций + " " + Формат(Значение, "ЧРД=.; ЧГ=;");
		Иначе
			ВызватьИсключение СтрШаблон("Значения опций с типом '%1' не поддерживаются", ТипЗначения);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтрокаОпций;
	
КонецФункции

#КонецОбласти

#Область Куки

// Десериализовывает значение заголовка ответа Set-Cookie.
// 
// Параметры:
//  Строка - Строка - Значение заголовка Set-Cookie
// 
// Возвращаемое значение:
//  см. НоваяЗаписьКуки
Функция ДесериализоватьSetCookie(Строка)
	
	Если Не ЗначениеЗаполнено(Строка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МассивСтрокАтрибутов = СтрРазделить(Строка, ";");
	
	ЗаписьКуки = НоваяЗаписьКуки();
	
	Для Каждого СтрокаАтрибута Из МассивСтрокАтрибутов Цикл
		ПозицияРавенства = СтрНайти(СтрокаАтрибута, "=");
		
		ЗначениеАтрибута = ""; // Строка, Булево
		Если ПозицияРавенства Тогда
			ИмяАтрибута = СокрЛП(Сред(СтрокаАтрибута, 1, ПозицияРавенства - 1));	
			ЗначениеАтрибута = СокрЛП(Сред(СтрокаАтрибута, ПозицияРавенства + 1));
		Иначе
			ИмяАтрибута = СокрЛП(СтрокаАтрибута);
			ЗначениеАтрибута = Истина;
		КонецЕсли;
			
		Если ЭтоАтрибутКуки(ИмяАтрибута) Тогда
			ЗаписьКуки[НормализованноеИмяАтрибутаКуки(ИмяАтрибута)] = ЗначениеАтрибута;
		ИначеЕсли Не ЗначениеЗаполнено(ЗаписьКуки["Name"]) Тогда
			ЗаписьКуки["Name"] = ИмяАтрибута;
			ЗаписьКуки["Value"] = ЗначениеАтрибута;
		Иначе
			// Это не атрибут куки или имя куки уже заполнен
		КонецЕсли;
	КонецЦикла;

	Возврат ЗаписьКуки;

КонецФункции

// Новая запись куки.
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение - Запись куки
Функция НоваяЗаписьКуки()
	Запись = Новый Соответствие(); // Соответствие из КлючИЗначение
	Запись.Вставить("Name");
	Запись.Вставить("Value");
	
	Для Каждого КлючЗначение Из АтрибутыКуки() Цикл
		Запись.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
	КонецЦикла;	
	
	Возврат Запись;
КонецФункции

Функция ЭтоАтрибутКуки(Знач Имя)
	
	Имя = НРег(Имя);

	Для Каждого КлючЗначение Из АтрибутыКуки() Цикл
		Если Имя = НРег(КлючЗначение.Ключ) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция АтрибутыКуки()
	Результат = Новый Соответствие(); // Соответствие из КлючИЗначение
	Результат.Вставить("Domain");
	Результат.Вставить("Expires");	
	Результат.Вставить("Path");
	Результат.Вставить("SameSite");
	Результат.Вставить("Secure", Ложь);
	Результат.Вставить("HttpOnly", Ложь);
	Результат.Вставить("Max-Age");	
	Результат.Вставить("Partitioned", Ложь);
	Результат.Вставить("Priority");
	Возврат Результат;
КонецФункции

// Нормализованное имя атрибута куки.
// 
// Параметры:
//  Имя - Строка - Имя
// 
// Возвращаемое значение:
//  Строка - Нормализованное имя атрибута куки
Функция НормализованноеИмяАтрибутаКуки(Знач Имя)

	Имя = НРег(Имя);
	
	Для Каждого КлючЗначение Из АтрибутыКуки() Цикл
		Если Имя = НРег(КлючЗначение.Ключ) Тогда
			Возврат КлючЗначение.Ключ;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Имя;
	
КонецФункции

#КонецОбласти

#Область Эмуляция

// Эмуляция chrome.
// 
// Параметры:
//  Опции - Соответствие из КлючИЗначение - Опции команды curl
Процедура ЭмуляцияChrome(Опции)
	
	Если Не ЭтоHTTP() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьЗаголовкиChrome();
	ДобавитьНаборыШифровChrome();
	
	Если Не НастройкиПеренаправления.Перенаправлять Тогда
		РазрешатьПеренаправления();
	КонецЕсли;
	
	ДобавитьОпциюВСписок(Опции, "--http2");
	ДобавитьОпциюВСписок(Опции, "--tlsv1.2");
	ДобавитьОпциюВСписок(Опции, "--compressed");
	
КонецПроцедуры

Функция УстановитьЗаголовкиChrome()
	Заголовки = ПолучитьМакет("ChromeHeaders").ПолучитьТекст(); 
	УстановитьЗаголовки(Заголовки);
	Возврат ЭтотОбъект();
КонецФункции

// Добавляет шифры chrome в набор.
// 
// Возвращаемое значение:
//  см. ЭтотОбъект
Функция ДобавитьНаборыШифровChrome()
	НаборыШифров.Очистить();
	Возврат ДобавитьНаборыШифров("TLS_AES_128_GCM_SHA256,TLS_AES_256_GCM_SHA384,TLS_CHACHA20_POLY1305_SHA256,ECDHE-ECDSA-AES128-GCM-SHA256,ECDHE-RSA-AES128-GCM-SHA256,ECDHE-ECDSA-AES256-GCM-SHA384,ECDHE-RSA-AES256-GCM-SHA384,ECDHE-ECDSA-CHACHA20-POLY1305,ECDHE-RSA-CHACHA20-POLY1305,ECDHE-RSA-AES128-SHA,ECDHE-RSA-AES256-SHA,AES128-GCM-SHA256,AES256-GCM-SHA384,AES128-SHA,AES256-SHA");
КонецФункции

#КонецОбласти

#Область ОбщегоНазначения

// Проверяет, содержит ли строка только цифры.
//
// Параметры:
//  Значение         - Строка - проверяемая строка.
//  ПробелыЗапрещены - Булево - если Ложь, то в строке допустимо наличие пробелов.
//
// Возвращаемое значение:
//   Булево - Истина - строка содержит только цифры или пустая, Ложь - строка содержит иные символы.
Функция ТолькоЦифрыВСтроке(Знач Значение, Знач ПробелыЗапрещены = Истина)
	
	Если ТипЗнч(Значение) <> Тип("Строка") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ПробелыЗапрещены Тогда
		Значение = СтрЗаменить(Значение, " ", "");
	КонецЕсли;
		
	Если СтрДлина(Значение) = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Если содержит только цифры, то в результате замен должна быть получена пустая строка.
	// Проверять при помощи ПустаяСтрока нельзя, так как в исходной строке могут быть пробельные символы.
	Возврат СтрДлина(
		СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить(
		СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( 
			Значение, "0", ""), "1", ""), "2", ""), "3", ""), "4", ""), "5", ""), "6", ""), "7", ""), "8", ""), "9", "")) = 0;
	
КонецФункции

// Дополняет массив МассивПриемник значениями из массива МассивИсточник.
//
// Параметры:
//  МассивПриемник - Массив из Произвольный - массив, в который необходимо добавить значения.
//  МассивИсточник - Массив из Произвольный - массив значений для заполнения.
//  ТолькоУникальныеЗначения - Булево - если истина, то в массив будут включены только уникальные значения.
//
Процедура ДополнитьМассив(МассивПриемник, МассивИсточник, ТолькоУникальныеЗначения = Ложь)
	
	Если ТолькоУникальныеЗначения Тогда
		
		УникальныеЗначения = Новый Соответствие;
		
		Для Каждого Значение Из МассивПриемник Цикл
			УникальныеЗначения.Вставить(Значение, Истина);
		КонецЦикла;
		
		Для Каждого Значение Из МассивИсточник Цикл
			Если УникальныеЗначения[Значение] = Неопределено Тогда
				МассивПриемник.Добавить(Значение);
				УникальныеЗначения.Вставить(Значение, Истина);
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		Для Каждого Значение Из МассивИсточник Цикл
			МассивПриемник.Добавить(Значение);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Дополняет соответствие значениями из другого соответствия.
//
// Параметры:
//   Приемник - Соответствие из КлючИЗначение - коллекция, в которую будут добавляться новые значения.
//   Источник - Соответствие из КлючИЗначение - коллекция, из которой будут считываться пары 
//                                                Ключ и Значение для заполнения.
//   Заменять - Булево, Неопределено - Что делать в местах пересечения ключей источника и приемника:
//                                       Истина - Заменять значения приемника (самый быстрый способ),
//                                       Ложь   - Не заменять значения приемника (пропускать),
//                                       Неопределено - Значение по умолчанию. Бросать исключение.
//
Процедура ДополнитьСоответствие(Приемник, Источник, Заменять = Неопределено)
	
	Для Каждого Элемент Из Источник Цикл
		Если Заменять <> Истина И Приемник[Элемент.Ключ] <> Неопределено Тогда
			Если Заменять = Ложь Тогда
				Продолжить;
			Иначе
				ВызватьИсключение СтрШаблон(НСтр("ru = 'Пересечение ключей источника и приемника: ""%1"".'"), Элемент.Ключ);
			КонецЕсли;
		КонецЕсли;
		Приемник.Вставить(Элемент.Ключ, Элемент.Значение);
	КонецЦикла;
	
КонецПроцедуры

// Создает полную копию структуры, соответствия, массива, списка или таблицы значений, рекурсивно, 
// с учетом типов дочерних элементов. При этом содержимое значений объектных типов 
// (СправочникОбъект, ДокументОбъект и т.п.) не копируются, а возвращаются ссылки на исходный объект.
//
// Параметры:
//  Источник - Структура
//           - Соответствие из КлючИЗначение
//           - Массив из Произвольный
//           - СписокЗначений из Произвольный
//           - ТаблицаЗначений - объект, который необходимо скопировать.
//
// Возвращаемое значение:
//  - Структура
//  - Соответствие из КлючИЗначение
//  - Массив из Произвольный
//  - СписокЗначений из Произвольный
//  - ТаблицаЗначений - копия объекта, переданного в параметре Источник.
//
Функция СкопироватьРекурсивно(Источник)
	
	Перем Приемник; // Структура, Соответствие, Массив, СписокЗначений, ТаблицаЗначений
	
	ТипИсточника = ТипЗнч(Источник);
	
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	Если ТипИсточника = Тип("ТаблицаЗначений") Тогда
		Возврат Источник.Скопировать();
	КонецЕсли;
#КонецЕсли	
	Если ТипИсточника = Тип("Структура") Тогда
		Приемник = СкопироватьСтруктуру(Источник);
	ИначеЕсли ТипИсточника = Тип("Соответствие") Тогда
		//@skip-check statement-type-change
		Приемник = СкопироватьСоответствие(Источник);
	ИначеЕсли ТипИсточника = Тип("Массив") Тогда
		//@skip-check statement-type-change
		Приемник = СкопироватьМассив(Источник);
	ИначеЕсли ТипИсточника = Тип("СписокЗначений") Тогда
		//@skip-check statement-type-change
		Приемник = СкопироватьСписокЗначений(Источник);
	Иначе
		Приемник = Источник;
	КонецЕсли;
	
	Возврат Приемник;
	
КонецФункции

// Создает копию значения типа Структура, рекурсивно, с учетом типов значений свойств. 
// Если свойства структуры содержат значения объектных типов (СправочникОбъект, ДокументОбъект и т.п.),
// то их содержимое не копируются, а возвращаются ссылки на исходный объект.
//
// Параметры:
//  СтруктураИсточник - Структура - копируемая структура.
// 
// Возвращаемое значение:
//  Структура - копия исходной структуры.
//
Функция СкопироватьСтруктуру(СтруктураИсточник)
	
	СтруктураРезультат = Новый Структура;
	
	Для Каждого КлючИЗначение Из СтруктураИсточник Цикл
		Значение = КлючИЗначение.Значение; // Структура, Соответствие, Массив, СписокЗначений, ТаблицаЗначений
		СтруктураРезультат.Вставить(КлючИЗначение.Ключ, СкопироватьРекурсивно(Значение));
	КонецЦикла;
	
	Возврат СтруктураРезультат;
	
КонецФункции

// Создает копию значения типа Соответствие, рекурсивно, с учетом типов значений.
// Если значения соответствия содержат значения объектных типов (СправочникОбъект, ДокументОбъект и т.п.),
// то их содержимое не копируются, а возвращаются ссылки на исходный объект.
//
// Параметры:
//  СоответствиеИсточник - Соответствие из КлючИЗначение - соответствие, копию которого необходимо получить.
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение - копия исходного соответствия.
//
Функция СкопироватьСоответствие(СоответствиеИсточник)
	
	СоответствиеРезультат = Новый Соответствие;
	
	Для Каждого КлючИЗначение Из СоответствиеИсточник Цикл
		Значение = КлючИЗначение.Значение; // Структура, Соответствие, Массив, СписокЗначений, ТаблицаЗначений
		СоответствиеРезультат.Вставить(КлючИЗначение.Ключ, СкопироватьРекурсивно(Значение));
	КонецЦикла;
	
	Возврат СоответствиеРезультат;

КонецФункции

// Создает копию значения типа Массив, рекурсивно, с учетом типов значений элементов массива.
// Если элементы массива содержат значения объектных типов (СправочникОбъект, ДокументОбъект и т.п.),
// то их содержимое не копируются, а возвращаются ссылки на исходный объект.
//
// Параметры:
//  МассивИсточник - Массив из Произвольный - массив, копию которого необходимо получить.
// 
// Возвращаемое значение:
//  Массив из Произвольный - копия исходного массива.
//
Функция СкопироватьМассив(МассивИсточник)
	
	МассивРезультат = Новый Массив; // Массив из Произвольный
	
	Для Каждого Элемент Из МассивИсточник Цикл
		//@skip-check typed-value-adding-to-untyped-collection
		//@skip-check invocation-parameter-type-intersect
		МассивРезультат.Добавить(СкопироватьРекурсивно(Элемент));
	КонецЦикла;
	
	Возврат МассивРезультат;
	
КонецФункции

// Создает копию значения типа СписокЗначений, рекурсивно, с учетом типов его значений.
// Если в списке значений есть значения объектных типов (СправочникОбъект, ДокументОбъект и т.п.),
// то их содержимое не копируются, а возвращаются ссылки на исходный объект.
//
// Параметры:
//  СписокИсточник - СписокЗначений из Произвольный - список значений, копию которого необходимо получить.
// 
// Возвращаемое значение:
//  СписокЗначений из Произвольный - копия исходного списка значений.
//
Функция СкопироватьСписокЗначений(СписокИсточник)
	
	СписокРезультат = Новый СписокЗначений;
	
	Для Каждого ЭлементСписка Из СписокИсточник Цикл
		//@skip-check typed-value-adding-to-untyped-collection
		//@skip-check invocation-parameter-type-intersect
		СписокРезультат.Добавить(
			СкопироватьРекурсивно(ЭлементСписка.Значение), 
			ЭлементСписка.Представление, 
			ЭлементСписка.Пометка, 
			ЭлементСписка.Картинка);
	КонецЦикла;
	
	Возврат СписокРезультат;
	
КонецФункции

Функция ЭтоWindows()
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Возврат СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86 
		Или СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64;
	
КонецФункции

// Определяет режим эксплуатации информационной базы файловый (Истина) или серверный (Ложь).
// При проверке используется СтрокаСоединенияИнформационнойБазы, которую можно указать явно.
//
// Возвращаемое значение:
//  Булево - Истина, если файловая.
//
Функция ИнформационнаяБазаФайловая()
	СтрокаСоединенияИнформационнойБазы =  СтрокаСоединенияИнформационнойБазы();
	Возврат СтрНайти(ВРег(СтрокаСоединенияИнформационнойБазы), "FILE=") = 1;	
КонецФункции

// Вызывает исключение с текстом Сообщение, если Условие не равно Истина.
// Применяется для самодиагностики кода.
//
// Параметры:
//   Условие - Булево - если не равно Истина, то вызывается исключение.
//   Сообщение - Строка - текст сообщения. Если не задан, то исключение вызывается с сообщением по умолчанию.
//   КонтекстПроверки - Строка - например, имя процедуры или функции, в которой выполняется проверка.
//
Процедура Проверить(Знач Условие, Знач Сообщение = "", Знач КонтекстПроверки = "")
	
	Если Условие <> Истина Тогда
		
		Если ПустаяСтрока(Сообщение) Тогда
			ТекстИсключения = НСтр("ru = 'Недопустимая операция'"); // Assertion failed
		Иначе
			ТекстИсключения = Сообщение;
		КонецЕсли;
		
		Если Не ПустаяСтрока(КонтекстПроверки) Тогда
			ТекстИсключения = СтрШаблон(
				НСтр("ru = '%1 в %2'"), ТекстИсключения, КонтекстПроверки);
		КонецЕсли;
		
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Инициализация

УстановитьНачальныеНастройки();

#КонецОбласти

#КонецЕсли